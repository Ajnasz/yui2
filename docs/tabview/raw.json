{"classmap": {"YAHOO.widget.TabView": {"name": "YAHOO.widget.TabView", "configs": {"tabs": {"type": "Array", "description": "The Tabs belonging to the TabView instance."}, "activeIndex": {"type": "YAHOO.widget.Tab", "description": "The index of the tab currently active."}, "activeTab": {"type": "YAHOO.widget.Tab", "description": "The tab currently active."}, "orientation": {"default": "\"top\"", "type": "String", "description": "How the Tabs should be oriented relative to the TabView."}}, "constructors": [{"params": [{"type": "HTMLElement | String | Object", "name": "el", "description": "(optional) The html \nelement that represents the TabView, or the attribute object to use. \nAn element will be created if none provided."}, {"type": "Object", "name": "attr", "description": " (optional) A key map of the tabView's \ninitial attributes.  Ignored if first arg is attributes object."}], "description": "A widget to control tabbed views."}], "namespace": "YAHOO.widget", "module": "tabview", "events": {"beforeActiveTabChange": {"description": "Fires before the activeTab is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeActiveTabChange<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nprevValue<\/code> the currently active tab<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nnewValue<\/code> the tab to be made active<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeActiveTabChange', handler);<\/code><\/p>"}, "orientationChange": {"description": "Fires after the orientation is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> orientationChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the former orientation<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new orientation<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('orientationChange', handler);<\/code><\/p>"}, "activeTabChange": {"description": "Fires after the activeTab is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> activeTabChange<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nprevValue<\/code> the formerly active tab<br>\n<code>&lt;<a href=\"YAHOO.widget.Tab.html\">YAHOO.widget.Tab<\/a>&gt;\nnewValue<\/code> the new active tab<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('activeTabChange', handler);<\/code><\/p>"}, "beforeOrientationChange": {"description": "Fires before the orientation is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeOrientationChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the current orientation<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new orientation to be applied<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeOrientationChange', handler);<\/code><\/p>"}}, "guessedname": "TabView", "methods": {"getTabIndex": {"return": {"type": "", "description": "int"}, "params": [{"type": "YAHOO.widget.Tab", "name": "tab", "description": " The tab whose index will be returned."}], "description": "Returns the index of given tab.", "guessedname": "getTabIndex", "guessedtype": "function"}, "removeTab": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.Tab", "name": "item", "description": " The Tab instance to be removed."}], "description": "Removes the specified Tab from the TabView.", "guessedname": "removeTab", "guessedtype": "function"}, "contentTransition": {"description": "The transiton to use when switching between tab content."}, "createTabs": {"return": {"type": "", "description": "void"}, "description": "Creates Tab instances from a collection of HTMLElements.", "private": "", "params": [{"type": "Array|HTMLCollection", "name": "elements", "description": " The elements to use for Tabs."}], "guessedname": "_initTabs", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Hash of initial attributes"}], "description": "Registers TabView specific properties.", "guessedname": "initAttributes", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String"}, "description": "Provides a readable name for the TabView instance.", "guessedname": "toString", "guessedtype": "function"}, "DOMEventHandler": {"return": {"type": "", "description": "void"}, "params": [{"type": "event", "name": "e", "description": " The Dom event that is being handled."}], "description": "Routes childNode events.", "guessedname": "DOMEventHandler", "guessedtype": "function"}, "addTab": {"return": {"type": "", "description": "void"}, "params": [{"type": "YAHOO.widget.Tab", "name": "tab", "description": " A Tab instance to add."}, {"type": "Integer", "name": "index", "description": " The position to add the tab."}], "description": "Adds a Tab to the TabView instance.  \nIf no index is specified, the tab is added to the end of the tab list.", "guessedname": "addTab", "guessedtype": "function"}, "getTab": {"return": {"type": "", "description": "YAHOO.widget.Tab"}, "params": [{"type": "Integer", "name": "index", "description": " The position of the Tab."}], "description": "Returns the Tab instance at the specified index.", "guessedname": "getTab", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.widget.YAHOO.util.Element", "file": "TabView.js", "guessedtype": "function", "shortname": "TabView", "properties": {"CLASSNAME": {"default": "\"navset\"", "description": "The className to add when building from scratch.", "guessedname": "CLASSNAME", "guessedtype": "property"}, "TAB_PARENT_CLASSNAME": {"default": "\"nav\"", "description": "The className of the HTMLElement containing the TabView's tab elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the tab container are treated as Tabs when building\nfrom existing markup.", "guessedname": "TAB_PARENT_CLASSNAME", "guessedtype": "property"}, "CONTENT_PARENT_CLASSNAME": {"default": "\"nav-content\"", "description": "The className of the HTMLElement containing the TabView's label elements\nto look for when building from existing markup, or to add when building\nfrom scratch. \nAll childNodes of the content container are treated as content elements when\nbuilding from existing markup.", "guessedname": "CONTENT_PARENT_CLASSNAME", "guessedtype": "property"}, "_tabParent": {"guessedname": "_tabParent", "type": "HTMLElement", "description": "The container of the tabView's label elements.", "private": "", "guessedtype": "property"}, "_contentParent": {"guessedname": "_contentParent", "type": "HTMLElement", "description": "The container of the tabView's content elements.", "private": "", "guessedtype": "property"}}, "description": "A widget to control tabbed views."}, "YAHOO.util.AttributeProvider": {"name": "YAHOO.util.AttributeProvider", "namespace": "YAHOO.util", "module": "tabview", "guessedname": "AttributeProvider", "methods": {"set": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "params": [{"type": "String", "name": "key", "description": " The name of the attribute"}, {"type": "Any", "name": "value", "description": " The value to apply to the attribute"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets the value of a config.", "guessedname": "set", "guessedtype": "function"}, "fireBeforeChangeEvent": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Obj", "name": "e", "description": " The event object to pass to handlers."}], "description": "Fires the attribute's beforeChange event.", "guessedname": "fireBeforeChangeEvent", "guessedtype": "function"}, "resetValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set"}, "params": [{"type": "String", "name": "key", "description": " The name of the attribute"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Resets the specified attribute's value to its initial value.", "guessedname": "resetValue", "guessedtype": "function"}, "get": {"params": [{"type": "String", "name": "key", "description": " The attribute whose value will be returned."}], "description": "Returns the current value of the attribute.", "guessedname": "get", "guessedtype": "function"}, "resetAttributeConfig": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}], "description": "Resets an attribute to its intial configuration.", "guessedname": "resetAttributeConfig", "guessedtype": "function"}, "register": {"params": [{"type": "String", "name": "key", "description": " The attribute's name"}, {"type": "Object", "name": "map", "description": " A key-value map containing the\nattribute's properties."}], "description": "Adds an Attribute to the AttributeProvider instance.", "guessedname": "register", "guessedtype": "function"}, "getAttributeConfig": {"return": {"type": "object", "description": "A key-value map containing all of the\nattribute's properties."}, "params": [{"type": "String", "name": "key", "description": " The attribute's name"}], "description": "Returns the attribute's properties.", "guessedname": "getAttributeConfig", "guessedtype": "function"}, "refresh": {"params": [{"type": "String | Array", "name": "key", "description": " The attribute(s) to refresh"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets the attribute's value to its current value.", "guessedname": "refresh", "guessedtype": "function"}, "fireChangeEvent": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Obj", "name": "e", "description": " The event object to pass to the handlers."}], "description": "Fires the attribute's change event.", "guessedname": "fireChangeEvent", "guessedtype": "function"}, "getAttributeKeys": {"return": {"type": "Array", "description": "An array of attribute names."}, "description": "Returns an array of attribute names.", "guessedname": "getAttributeKeys", "guessedtype": "function"}, "setValues": {"params": [{"type": "Object", "name": "map", "description": "  A key-value map of attributes"}, {"type": "Boolean", "name": "silent", "description": " Whether or not to suppress change events"}], "description": "Sets multiple attribute values.", "guessedname": "setValues", "guessedtype": "function"}, "configureAttribute": {"params": [{"type": "String", "name": "key", "description": " The attribute's name."}, {"type": "Object", "name": "map", "description": " A key-value map of attribute properties"}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the intial config."}], "description": "Sets or updates an Attribute instance's properties.", "guessedname": "configureAttribute", "guessedtype": "function"}}, "uses": ["YAHOO.util.EventProvider"], "file": "AttributeProvider.js", "guessedtype": "function", "shortname": "AttributeProvider", "properties": {"_configs": {"description": "A key-value map of Attribute configurations", "private": "", "protected": "", "guessedname": "_configs", "guessedtype": "property", "type": "{Object}"}}, "description": "Provides and manages YAHOO.util.Attribute instances"}, "YAHOO.util.Attribute": {"name": "YAHOO.util.Attribute", "constructors": [{"params": [{"type": "Object", "name": "hash", "description": "  The intial Attribute."}, {"type": "YAHOO.util.AttributeProvider", "name": "The", "description": " owner of the Attribute instance."}], "description": "Provides Attribute configurations."}], "namespace": "YAHOO.util", "module": "tabview", "guessedname": "Attribute", "methods": {"setValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "params": [{"type": "Any", "name": "value", "description": " The value to apply to the attribute."}, {"type": "Boolean", "name": "silent", "description": " If true the change events will not be fired."}], "description": "Sets the value of the attribute and fires beforeChange and change events.", "guessedname": "setValue", "guessedtype": "function"}, "configure": {"params": [{"type": "Object", "name": "map", "description": " A key-value map of Attribute properties."}, {"type": "Boolean", "name": "init", "description": " Whether or not this should become the initial config."}], "description": "Allows for configuring the Attribute's properties.", "guessedname": "configure", "guessedtype": "function"}, "resetValue": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "description": "Resets the value to the initial config value.", "guessedname": "resetValue", "guessedtype": "function"}, "refresh": {"return": {"type": "Boolean", "description": "Whether or not the value was set."}, "description": "Resets the value to the current value.\nUseful when values may have gotten out of sync with actual properties.", "guessedname": "refresh", "guessedtype": "function"}, "getValue": {"return": {"type": "any", "description": "The current value of the attribute."}, "description": "Retrieves the current value of the attribute.", "guessedname": "getValue", "guessedtype": "function"}, "resetConfig": {"description": "Resets the attribute config to the initial config state.", "guessedname": "resetConfig", "guessedtype": "function"}}, "file": "Attribute.js", "guessedtype": "function", "shortname": "Attribute", "properties": {"_written": {"guessedname": "_written", "type": "Boolean", "description": "Whether or not the attribute's value has been set.", "private": "", "guessedtype": "property"}, "name": {"type": "String", "description": "The name of the attribute.", "guessedname": "name", "guessedtype": "property"}, "writeOnce": {"type": "Boolean", "description": "Whether or not the attribute can only be written once.", "guessedname": "writeOnce", "guessedtype": "property"}, "_initialConfig": {"guessedname": "_initialConfig", "type": "Object", "description": "The attribute's initial configuration.", "private": "", "guessedtype": "property"}, "value": {"type": "String", "description": "The value of the attribute.", "guessedname": "value", "guessedtype": "property"}, "readOnly": {"type": "Boolean", "description": "Whether or not the attribute is read only.", "guessedname": "readOnly", "guessedtype": "property"}, "validator": {"type": "Function", "return": "Boolean", "description": "The validator to use when setting the attribute's value.", "guessedname": "validator", "guessedtype": "property"}, "owner": {"type": "YAHOO.util.AttributeProvider", "description": "The owner of the attribute.", "guessedname": "owner", "guessedtype": "property"}, "method": {"type": "Function", "description": "The method to use when setting the attribute's value.\nThe method recieves the new value as the only argument.", "guessedname": "method", "guessedtype": "property"}}, "description": "Provides Attribute configurations."}, "YAHOO.util.Element": {"name": "YAHOO.util.Element", "configs": {"element": {"type": "HTMLElement", "description": "The HTMLElement the Element instance refers to."}}, "constructors": [{"params": [{"type": "HTMLElement | String", "name": "el", "description": "  The html element that \nrepresents the Element."}, {"type": "Object", "name": "map", "description": " A key-value map of initial config names and values"}], "description": "Element provides an interface to an HTMLElement's attributes and common\nmethods.  Other commonly used attributes are added as well."}], "namespace": "YAHOO.util", "module": "tabview", "events": {"available": {"description": "Fires when the Element's HTMLElement can be retrieved by Id.\n<p>See: <a href=\"#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> available<br>\n<code>&lt;HTMLElement&gt;\ntarget<\/code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('available', handler);<\/code><\/p>"}, "contentReady": {"description": "Fires when the Element's HTMLElement subtree is rendered.\n<p>See: <a href=\"#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> contentReady<br>\n<code>&lt;HTMLElement&gt;\ntarget<\/code> the HTMLElement bound to this Element instance<br>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var target = e.target};<br>\nmyTabs.addListener('contentReady', handler);<\/code><\/p>"}}, "guessedname": "Element", "methods": {"fireQueue": {"description": "Apply any queued set calls.", "guessedname": "fireQueue", "guessedtype": "function"}, "appendChild": {"params": [{"type": "Boolean", "name": "deep", "description": " Whether or not to do a deep clone"}], "description": "Wrapper for HTMLElement method.", "guessedname": "appendChild", "guessedtype": "function"}, "addListener": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The handler to call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Adds a listener for the given event.  These may be DOM or \ncustomEvent listeners.  Any event that is fired via fireEvent\ncan be listened for.  All handlers receive an event object.", "guessedname": "addListener", "guessedtype": "function"}, "removeClass": {"params": [{"type": "String", "name": "className", "description": " The className to remove"}], "description": "Wrapper for Dom method.", "guessedname": "removeClass", "guessedtype": "function"}, "insertBefore": {"params": [{"type": "HTMLElement", "name": "element", "description": " The HTMLElement to insert"}, {"type": "HTMLElement", "name": "before", "description": " The HTMLElement to insert\nthe element before."}], "description": "Wrapper for HTMLElement method.", "guessedname": "insertBefore", "guessedtype": "function"}, "on": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}, {"type": "Any", "name": "obj", "description": " A variable to pass to the handler"}, {"type": "Object", "name": "scope", "description": " The object to use for the scope of the handler"}], "description": "Alias for addListener", "guessedname": "on", "guessedtype": "function"}, "getElementsByTagName": {"params": [{"type": "String", "name": "tag", "description": " The tagName to collect"}], "description": "Wrapper for HTMLElement method.", "guessedname": "getElementsByTagName", "guessedtype": "function"}, "getElementsByClassName": {"return": {"type": "Array", "description": "Array of HTMLElements"}, "params": [{"type": "String", "name": "className", "description": " The className to collect"}, {"type": "String", "name": "tag", "description": " (optional) The tag to use in\nconjunction with class name"}], "description": "Wrapper for Dom method.", "guessedname": "getElementsByClassName", "guessedtype": "function"}, "replaceClass": {"params": [{"type": "String", "name": "oldClassName", "description": " The className to replace"}, {"type": "String", "name": "newClassName", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "replaceClass", "guessedtype": "function"}, "appendTo": {"params": [{"type": "HTMLElement | Element", "name": "parentNode", "description": " The node to append to"}, {"type": "HTMLElement | Element", "name": "before", "description": " An optional node to insert before"}], "description": "Renders the HTMLElement into either the supplied parentNode or\nthe document.body.", "guessedname": "appendTo", "guessedtype": "function"}, "getStyle": {"return": {"type": "String", "description": "The current value of the property"}, "params": [{"type": "String", "name": "property", "description": " The style property to retrieve"}], "description": "Wrapper for Dom method.", "guessedname": "getStyle", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String", "name": "property", "description": " The style property to set"}, {"type": "String", "name": "value", "description": " The value to apply to the style property"}], "description": "Wrapper for Dom method.", "guessedname": "setStyle", "guessedtype": "function"}, "removeChild": {"params": [{"type": "HTMLElement", "name": "child", "description": " The HTMLElement to remove"}], "description": "Wrapper for HTMLElement method.", "guessedname": "removeChild", "guessedtype": "function"}, "initAttributes": {"params": [{"type": "Object", "name": "map", "description": " A key-value map of initial attribute configs"}], "description": "Registers Element specific attributes.", "guessedname": "initAttributes", "guessedtype": "function"}, "hasChildNodes": {"return": {"type": "Boolean", "description": "Whether or not the element has childNodes"}, "description": "Wrapper for HTMLElement method.", "guessedname": "hasChildNodes", "guessedtype": "function"}, "replaceChild": {"params": [{"type": "HTMLElement", "name": "newNode", "description": " The HTMLElement to insert"}, {"type": "HTMLElement", "name": "oldNode", "description": " The HTMLElement to replace"}], "description": "Wrapper for HTMLElement method.", "guessedname": "replaceChild", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean", "description": "Whether or not the element has the class name"}, "params": [{"type": "String", "name": "className", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "hasClass", "guessedtype": "function"}, "_registerHTMLAttr": {"guessedname": "_registerHTMLAttr", "params": [{"type": "YAHOO.util.Element", "name": "element", "description": " The Element instance to\nregister the config to."}, {"type": "String", "name": "key", "description": " The name of the config to register"}, {"type": "Object", "name": "map", "description": " A key-value map of the config's params"}], "description": "Sets the value of the property and fires beforeChange and change events.", "private": "", "guessedtype": "function"}, "removeListener": {"params": [{"type": "String", "name": "type", "description": " The name of the event to listen for"}, {"type": "Function", "name": "fn", "description": " The function call when the event fires"}], "description": "Remove an event listener", "guessedname": "removeListener", "guessedtype": "function"}, "addClass": {"params": [{"type": "String", "name": "className", "description": " The className to add"}], "description": "Wrapper for Dom method.", "guessedname": "addClass", "guessedtype": "function"}}, "uses": ["YAHOO.util.AttributeProvider"], "file": "Element.js", "guessedtype": "function", "shortname": "Element", "properties": {"DOM_EVENTS": {"type": "Object", "description": "Dom events supported by the Element instance.", "guessedname": "DOM_EVENTS", "guessedtype": "property"}}, "description": "Element provides an interface to an HTMLElement's attributes and common\nmethods.  Other commonly used attributes are added as well."}, "YAHOO.widget.Tab": {"name": "YAHOO.widget.Tab", "configs": {"content": {"type": "String", "description": "The tab's content."}, "dataTimeout": {"default": "null", "type": "Number", "description": "Number if milliseconds before aborting and calling failure handler."}, "contentEl": {"type": "HTMLElement", "description": "The HTMLElement that contains the tab's content."}, "loadMethod": {"default": "\"GET\"", "type": "String", "description": "The method to use for the data request."}, "dataSrc": {"type": "String", "description": "The tab's data source, used for loading content dynamically."}, "disabled": {"type": "Boolean", "description": "Whether or not the tab is disabled."}, "cacheData": {"default": "false", "type": "Boolean", "description": "Whether or not content should be reloaded for every view."}, "active": {"type": "Boolean", "description": "Whether or not the tab is currently active.\nIf a dataSrc is set for the tab, the content will be loaded from\nthe given source."}, "labelEl": {"type": "HTMLElement", "description": "The element that contains the tab's label."}, "label": {"type": "String", "description": "The tab's label text (or innerHTML)."}, "dataLoaded": {"type": "Boolean", "description": "Whether or not any data has been loaded from the server."}}, "constructors": [{"params": [{"type": "HTMLElement | String", "name": "element", "description": "  (optional) The html element that \nrepresents the TabView. An element will be created if none provided."}, {"type": "Object", "name": "properties", "description": " A key map of initial properties"}], "description": "A representation of a Tab's label and content."}], "namespace": "YAHOO.widget", "module": "tabview", "events": {"contentChange": {"description": "Fires after the tab content is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> contentChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the previous value<br>\n<code>&lt;Boolean&gt;\nnewValue<\/code> the updated value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('contentChange', handler);<\/code><\/p>"}, "activeChange": {"description": "Fires after the active state is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> activeChange<br>\n<code>&lt;Boolean&gt;\nprevValue<\/code> the previous value<br>\n<code>&lt;Boolean&gt;\nnewValue<\/code> the updated value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('activeChange', handler);<\/code><\/p>"}, "beforeContentChange": {"description": "Fires before the tab content is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeContentChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the current value<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeContentChange', handler);<\/code><\/p>"}, "beforeActiveChange": {"description": "Fires before the active state is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeActiveChange<br>\n<code>&lt;Boolean&gt;\nprevValue<\/code> the current value<br>\n<code>&lt;Boolean&gt;\nnewValue<\/code> the new value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeActiveChange', handler);<\/code><\/p>"}, "labelChange": {"description": "Fires after the tab label is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> labelChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the previous value<br>\n<code>&lt;String&gt;\nnewValue<\/code> the updated value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('labelChange', handler);<\/code><\/p>"}, "beforeLabelChange": {"description": "Fires before the tab label is changed.\n<p>See: <a href=\"YAHOO.util.Element.html#addListener\">Element.addListener<\/a><\/p>\n<p>If handler returns false, the change will be cancelled, and the value will not\nbe set.<\/p>\n<p><strong>Event fields:<\/strong><br>\n<code>&lt;String&gt; type<\/code> beforeLabelChange<br>\n<code>&lt;String&gt;\nprevValue<\/code> the current value<br>\n<code>&lt;String&gt;\nnewValue<\/code> the new value<\/p>\n<p><strong>Usage:<\/strong><br>\n<code>var handler = function(e) {var previous = e.prevValue};<br>\nmyTabs.addListener('beforeLabelChange', handler);<\/code><\/p>"}}, "guessedname": "Tab", "methods": {"initAttributes": {"params": [{"type": "Object", "name": "attr", "description": " Hash of initial attributes"}], "description": "Registers TabView specific properties.", "guessedname": "initAttributes", "guessedtype": "function"}, "showContent": {"description": "Shows the tab's content element.", "guessedname": "showContent", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "String"}, "description": "Provides a readable name for the tab.", "guessedname": "toString", "guessedtype": "function"}, "hideContent": {"description": "Hides the tab's content element.", "guessedname": "hideContent", "guessedtype": "function"}}, "extends": "YAHOO.util.Element", "superclass": "YAHOO.widget.YAHOO.util.Element", "file": "Tab.js", "guessedtype": "function", "shortname": "Tab", "properties": {"DISABLED_CLASSNAME": {"default": "\"disabled\"", "type": "String", "description": "The class name applied to disabled tabs.", "guessedname": "DISABLED_CLASSNAME", "guessedtype": "property"}, "LOADING_CLASSNAME": {"default": "\"disabled\"", "type": "String", "description": "The class name applied to dynamic tabs while loading.", "guessedname": "LOADING_CLASSNAME", "guessedtype": "property"}, "LABEL_TAGNAME": {"default": "\"a\"", "type": "String", "description": "The default tag name for a Tab's label element.", "guessedname": "LABEL_TAGNAME", "guessedtype": "property"}, "LABEL_INNER_TAGNAME": {"default": "\"em\"", "type": "String", "description": "The default tag name for a Tab's inner element.", "guessedname": "LABEL_INNER_TAGNAME", "guessedtype": "property"}, "dataConnection": {"type": "Object", "description": "Provides a reference to the connection request object when data is\nloaded dynamically.", "guessedname": "dataConnection", "guessedtype": "property"}, "loadHandler": {"type": "object", "description": "Object containing success and failure callbacks for loading data.", "guessedname": "loadHandler", "guessedtype": "property"}, "ACTIVATION_EVENT": {"default": "\"click\"", "type": "String", "description": "The event that activates the tab.", "guessedname": "ACTIVATION_EVENT", "guessedtype": "property"}, "ACTIVE_CLASSNAME": {"default": "\"on\"", "type": "String", "description": "The class name applied to active tabs.", "guessedname": "ACTIVE_CLASSNAME", "guessedtype": "property"}}, "description": "A representation of a Tab's label and content."}}, "modules": {"tabview": {"classlist": ["YAHOO.widget.TabView", "YAHOO.util.AttributeProvider", "YAHOO.util.Element", "YAHOO.util.Attribute", "YAHOO.widget.Tab"], "name": "tabview", "filelist": ["TabView.js", "AttributeProvider.js", "Element.js", "Attribute.js", "Lang.js", "Tab.js"], "description": "The tabview module provides a widget for managing content bound to tabs."}}, "namespaces": ["YAHOO.widget", "YAHOO.util"], "filemap": {"Element.js": {"classlist": ["YAHOO.util.Element"], "name": "Element.js", "module": "tabview"}, "TabView.js": {"classlist": ["YAHOO.widget.TabView"], "name": "TabView.js", "module": "tabview"}, "Lang.js": {"classlist": [], "name": "Lang.js", "module": "tabview"}, "AttributeProvider.js": {"classlist": ["YAHOO.util.AttributeProvider"], "name": "AttributeProvider.js", "module": "tabview"}, "Tab.js": {"classlist": ["YAHOO.widget.Tab"], "name": "Tab.js", "module": "tabview"}, "Attribute.js": {"classlist": ["YAHOO.util.Attribute"], "name": "Attribute.js", "module": "tabview"}}}