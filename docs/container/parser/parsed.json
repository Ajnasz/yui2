{"classmap": {"YAHOO.widget.Dialog": {"name": "YAHOO.widget.Dialog", "configs": {"buttons": {"default": "\"none\"", "type": "Object[]", "description": "Object literal(s) defining the buttons for the Dialog's footer.", "guessedname": "value", "guessedtype": "property"}, "postmethod": {"default": "async", "type": "String", "description": "The method to use for posting the Dialog's form. Possible values are \"async\", \"form\", and \"manual\".", "guessedname": "value", "guessedtype": "function"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Dialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Dialog"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Dialog. See configuration documentation for more details."}], "description": "Dialog is an implementation of Panel that can be used to submit form data. Built-in functionality for buttons with event handlers is included, and button sets can be build dynamically, or the preincluded ones for Submit\/Cancel and OK\/Cancel can be utilized. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually."}], "namespace": "YAHOO.widget", "module": "Container", "events": {"asyncSubmitEvent": {"description": "CustomEvent fired prior to asynchronous submission", "guessedname": "asyncSubmitEvent", "guessedtype": "property"}, "submitEvent": {"description": "CustomEvent fired after submission", "guessedname": "submitEvent", "guessedtype": "property"}, "manualSubmitEvent": {"description": "CustomEvent fired prior to manual submission", "guessedname": "manualSubmitEvent", "guessedtype": "property"}, "formSubmitEvent": {"description": "CustomEvent fired prior to form-based submission", "guessedname": "formSubmitEvent", "guessedtype": "property"}, "cancelEvent": {"description": "CustomEvent fired after cancel", "guessedname": "cancelEvent", "guessedtype": "property"}, "beforeSumitEvent": {"description": "CustomEvent fired prior to submission", "guessedname": "beforeSubmitEvent", "guessedtype": "property"}}, "guessedname": "Dialog", "methods": {"configButtons": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler for the \"buttons\" configuration property", "guessedname": "configButtons", "guessedtype": "function"}, "focusFirstButton": {"description": "Sets the focus to the first button in the button list", "guessedname": "focusFirstButton", "guessedtype": "function"}, "doSubmit": {"description": "Performs the submission of the Dialog form depending on the value of \"postmethod\" property.", "guessedname": "doSubmit", "guessedtype": "function"}, "blurButtons": {"description": "Blurs all the html buttons", "guessedname": "blurButtons", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Dialog which are fired automatically at appropriate times by the Dialog class.", "guessedname": "initEvents", "guessedtype": "function"}, "focusFirst": {"description": "The default event handler used to focus the first field of the form when the Dialog is shown.", "guessedname": "focusFirst", "guessedtype": "function"}, "focusLastButton": {"description": "Sets the focus to the first button in the button list", "guessedname": "focusLastButton", "guessedtype": "function"}, "submit": {"description": "Executes a submit of the Dialog followed by a hide, if validation is successful.", "guessedname": "submit", "guessedtype": "function"}, "focusLast": {"description": "Sets the focus to the last button in the button or form element in the Dialog", "guessedname": "focusLast", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Dialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Dialog"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Dialog. See configuration documentation for more details."}], "description": "The Dialog initialization method, which is executed for Dialog and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Dialog"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "cancel": {"description": "Executes the cancel of the Dialog followed by a hide.", "guessedname": "cancel", "guessedtype": "function"}, "focusDefaultButton": {"description": "Sets the focus to the button that is designated as the default. By default, his handler is executed when the show event is fired.", "guessedname": "focusDefaultButton", "guessedtype": "function"}, "validate": {"description": "Built-in function hook for writing a validation function that will be checked for a \"true\" value prior to a submit. This function, as implemented by default, always returns true, so it should be overridden if validation is necessary.", "guessedname": "validate", "guessedtype": "function"}, "getData": {"return": {"type": "Object", "description": "A JSON object reprsenting the data of the current form."}, "description": "Returns a JSON-compatible data structure representing the data currently contained in the form.", "guessedname": "getData", "guessedtype": "function"}, "registerForm": {"description": "Prepares the Dialog's internal FORM object, creating one if one is not currently present.", "guessedname": "registerForm", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the Dialog's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Panel", "superclass": "YAHOO.widget.Panel", "file": "Dialog.js", "guessedtype": "function", "shortname": "Dialog", "properties": {"YAHOO.widget.Dialog.CSS_DIALOG": {"description": "Constant representing the default CSS class used for a Dialog", "static": "", "guessedname": "CSS_DIALOG", "guessedtype": "property", "type": "String", "final": ""}, "callback": {"type": "Object", "description": "The internally maintained callback object for use with the Connection utility", "guessedname": "callback", "guessedtype": "property"}, "callback.failure": {"type": "Function", "description": "The function to execute upon failure of the Connection submission", "guessedname": "failure", "guessedtype": "property"}, "callback.success": {"type": "Function", "description": "The function to execute upon success of the Connection submission", "guessedname": "success", "guessedtype": "property"}, "callback.argument": {"type": "Object", "description": "The arbitraty argument or arguments to pass to the Connection callback functions", "guessedname": "argument", "guessedtype": "property"}}, "description": "Dialog is an implementation of Panel that can be used to submit form data. Built-in functionality for buttons with event handlers is included, and button sets can be build dynamically, or the preincluded ones for Submit\/Cancel and OK\/Cancel can be utilized. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually."}, "YAHOO.widget.SimpleDialog": {"name": "YAHOO.widget.SimpleDialog", "configs": {"text": {"default": "\"\"", "type": "String", "description": "Sets the text for the SimpleDialog", "guessedname": "value", "guessedtype": "property"}, "icon": {"default": "\"none\"", "type": "String", "description": "Sets the informational icon for the SimpleDialog", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the SimpleDialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the SimpleDialog"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this SimpleDialog. See configuration documentation for more details."}], "description": "SimpleDialog is a simple implementation of Dialog that can be used to submit a single value. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually."}], "namespace": "YAHOO.widget", "module": "Container", "guessedname": "SimpleDialog", "methods": {"configIcon": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Fired when the \"icon\" property is set.", "guessedname": "configIcon", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the SimpleDialog <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the SimpleDialog"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this SimpleDialog. See configuration documentation for more details."}], "description": "The SimpleDialog initialization method, which is executed for SimpleDialog and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the SimpleDialog"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Fired when the \"text\" property is set.", "guessedname": "configText", "guessedtype": "function"}, "registerForm": {"description": "Prepares the SimpleDialog's internal FORM object, creating one if one is not currently present, and adding the value hidden field.", "guessedname": "registerForm", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the SimpleDialog's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Dialog", "superclass": "YAHOO.widget.Dialog", "file": "SimpleDialog.js", "guessedtype": "function", "shortname": "SimpleDialog", "properties": {"YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG": {"description": "Constant representing the default CSS class used for a SimpleDialog", "static": "", "guessedname": "CSS_SIMPLEDIALOG", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_INFO": {"description": "Constant for the standard network icon for info", "static": "", "guessedname": "ICON_INFO", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_BLOCK": {"description": "Constant for the standard network icon for a blocking action", "static": "", "guessedname": "ICON_BLOCK", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_WARN": {"description": "Constant for the standard network icon for warn", "static": "", "guessedname": "ICON_WARN", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_ALARM": {"description": "Constant for the standard network icon for alarm", "static": "", "guessedname": "ICON_ALARM", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_TIP": {"description": "Constant for the standard network icon for a tip", "static": "", "guessedname": "ICON_TIP", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.SimpleDialog.ICON_HELP": {"description": "Constant for the standard network icon for help", "static": "", "guessedname": "ICON_HELP", "guessedtype": "property", "type": "String", "final": ""}}, "description": "SimpleDialog is a simple implementation of Dialog that can be used to submit a single value. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually."}, "YAHOO.widget.Panel": {"name": "YAHOO.widget.Panel", "configs": {"draggable": {"default": "true", "type": "Boolean", "description": "True if the Panel should be draggable", "guessedname": "value", "guessedtype": "property"}, "close": {"default": "true", "type": "Boolean", "description": "True if the Panel should display a \"close\" button", "guessedname": "value", "guessedtype": "property"}, "keylisteners": {"default": "null", "type": "YAHOO.util.KeyListener[]", "description": "A KeyListener (or array of KeyListeners) that will be enabled when the Panel is shown, and disabled when the Panel is hidden.", "guessedname": "handler", "guessedtype": "property"}, "underlay": {"default": "shadow", "type": "String", "description": "Sets the type of underlay to display for the Panel. Valid values are \"shadow\", \"matte\", and \"none\".", "guessedname": "value", "guessedtype": "property"}, "modal": {"default": "false", "type": "Boolean", "description": "True if the Panel should be displayed in a modal fashion, automatically creating a transparent mask over the document that will not be removed until the Panel is dismissed.", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Panel <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Panel"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Panel. See configuration documentation for more details."}], "description": "Panel is an implementation of Overlay that behaves like an OS window, with a draggable header and an optional close icon at the top right."}], "namespace": "YAHOO.widget", "module": "Container", "events": {"showMaskEvent": {"description": "CustomEvent fired after the modality mask is shown", "guessedname": "showMaskEvent", "guessedtype": "property"}, "dragEvent": {"description": "CustomEvent when the Panel is dragged", "guessedname": "dragEvent", "guessedtype": "property"}, "hideMaskEvent": {"description": "CustomEvent fired after the modality mask is hidden", "guessedname": "hideMaskEvent", "guessedtype": "property"}}, "guessedname": "Panel", "methods": {"configClose": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"close\" property is changed. The method controls the appending or hiding of the close icon at the top right of the Panel.", "guessedname": "configClose", "guessedtype": "function"}, "render": {"return": {"type": "boolean", "description": "Success or failure of the render"}, "params": [{"type": "String", "name": "appendToNode", "description": "\tThe element id to which the Module should be appended to prior to rendering <em>OR<\/em>"}, {"type": "HTMLElement", "name": "appendToNode", "description": "\tThe element to which the Module should be appended to prior to rendering"}], "description": "Renders the Panel by inserting the elements that are not already in the main Panel into their correct places. Optionally appends the Panel to the specified node prior to the render's execution. NOTE: For Panels without existing markup, the appendToNode argument is REQUIRED. If this argument is ommitted and the current element is not present in the document, the function will return false, indicating that the render was a failure.", "guessedname": "render", "guessedtype": "function"}, "hideMask": {"description": "Hides the modality mask.", "guessedname": "hideMask", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Module which are fired automatically at appropriate times by the Module class.", "guessedname": "initEvents", "guessedtype": "function"}, "configModal": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"modal\" property is changed. This handler subscribes or unsubscribes to the show and hide events to handle the display or hide of the modality mask.", "guessedname": "configModal", "guessedtype": "function"}, "configKeyListeners": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"keylisteners\" property is changed.", "guessedname": "configKeyListeners", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Overlay <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details."}], "description": "The Overlay initialization method, which is executed for Overlay and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Panel."}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "buildWrapper": {"description": "Builds the wrapping container around the Panel that is used for positioning the shadow and matte underlays. The container element is assigned to a  local instance variable called container, and the element is reinserted inside of it.", "guessedname": "buildWrapper", "guessedtype": "function"}, "removeMask": {"description": "Removes the modality mask.", "guessedname": "removeMask", "guessedtype": "function"}, "configHeight": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"height\" property is changed.", "guessedname": "configHeight", "guessedtype": "function"}, "showMask": {"description": "Shows the modality mask.", "guessedname": "showMask", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe resize DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "registerDragDrop": {"description": "Registers the Panel's header for drag & drop capability.", "guessedname": "registerDragDrop", "guessedtype": "function"}, "configUnderlay": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"underlay\" property is changed.", "guessedname": "configUnderlay", "guessedtype": "function"}, "buildMask": {"description": "Builds the mask that is laid over the document when the Panel is configured to be modal.", "guessedname": "buildMask", "guessedtype": "function"}, "configWidth": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"width\" property is changed.", "guessedname": "configWidth", "guessedtype": "function"}, "configDraggable": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"draggable\" property is changed.", "guessedname": "configDraggable", "guessedtype": "function"}, "sizeMask": {"description": "Sets the size of the modality mask to cover the entire scrollable area of the document", "guessedname": "sizeMask", "guessedtype": "function"}, "configzIndex": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"zIndex\" property is changed.", "guessedname": "configzIndex", "guessedtype": "function"}, "sizeUnderlay": {"description": "Adjusts the size of the shadow based on the size of the element.", "guessedname": "sizeUnderlay", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the Panel's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "Panel.js", "guessedtype": "function", "shortname": "Panel", "properties": {"YAHOO.widget.Panel.CSS_PANEL_CONTAINER": {"description": "Constant representing the default CSS class used for a Panel's wrapping container", "static": "", "guessedname": "CSS_PANEL_CONTAINER", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Panel.CSS_PANEL": {"description": "Constant representing the default CSS class used for a Panel", "static": "", "guessedname": "CSS_PANEL", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Panel is an implementation of Overlay that behaves like an OS window, with a draggable header and an optional close icon at the top right."}, "YAHOO.util.KeyListener": {"name": "YAHOO.util.KeyListener", "constructors": [{"params": [{"type": "HTMLElement", "name": "attachTo", "description": "\tThe element or element ID to which the key event should be attached"}, {"type": "String", "name": "attachTo", "description": "\tThe element or element ID to which the key event should be attached"}, {"type": "Object", "name": "keyData", "description": "\t\tThe object literal representing the key(s) to detect. Possible attributes are shift(boolean), alt(boolean), ctrl(boolean) and keys(either an int or an array of ints representing keycodes)."}, {"type": "Function", "name": "handler", "description": "\t\tThe CustomEvent handler to fire when the key event is detected"}, {"type": "Object", "name": "handler", "description": "\t\tAn object literal representing the handler."}, {"type": "String", "name": "event", "description": "\t\tOptional. The event (keydown or keyup) to listen for. Defaults automatically to keydown."}], "description": "KeyListener is a utility that provides an easy interface for listening for keydown\/keyup events fired against DOM elements."}], "namespace": "YAHOO.util", "module": "Container", "properties": {"YAHOO.util.KeyListener.KEYDOWN": {"description": "Constant representing the DOM \"keydown\" event.", "static": "", "guessedname": "KEYDOWN", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.util.KeyListener.KEYUP": {"description": "Constant representing the DOM \"keyup\" event.", "static": "", "guessedname": "KEYUP", "guessedtype": "property", "type": "String", "final": ""}, "enabled": {"type": "Boolean", "description": "Boolean indicating the enabled\/disabled state of the Tooltip", "guessedname": "enabled", "guessedtype": "property"}}, "guessedname": "KeyListener", "methods": {"handleKeyPress": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe keypress DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe DOM event scope object"}], "description": "Handles the key event when a key is pressed.", "private": ""}, "enable": {"description": "Enables the KeyListener by attaching the DOM event listeners to the target DOM element", "guessedname": "enable", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the KeyListener"}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "disable": {"description": "Disables the KeyListener by removing the DOM event listeners from the target DOM element", "guessedname": "disable", "guessedtype": "function"}}, "file": "KeyListener.js", "guessedtype": "function", "shortname": "KeyListener", "events": {"enabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": "\t\tThe object literal representing the key(s) to detect. Possible attributes are shift(boolean), alt(boolean), ctrl(boolean) and keys(either an int or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is enabled via the enable() function", "guessedname": "enabledEvent", "guessedtype": "property"}, "disabledEvent": {"params": [{"type": "Object", "name": "keyData", "description": "\t\tThe object literal representing the key(s) to detect. Possible attributes are shift(boolean), alt(boolean), ctrl(boolean) and keys(either an int or an array of ints representing keycodes)."}], "description": "The CustomEvent fired when the KeyListener is disabled via the disable() function", "guessedname": "disabledEvent", "guessedtype": "property"}, "keyEvent": {"guessedname": "keyEvent", "params": [{"type": "Object", "name": "keyData", "description": "\t\tThe object literal representing the key(s) to detect. Possible attributes are shift(boolean), alt(boolean), ctrl(boolean) and keys(either an int or an array of ints representing keycodes)."}], "description": "The CustomEvent fired internally when a key is pressed", "private": "", "guessedtype": "property"}}, "description": "KeyListener is a utility that provides an easy interface for listening for keydown\/keyup events fired against DOM elements."}, "YAHOO.widget.OverlayManager": {"name": "YAHOO.widget.OverlayManager", "configs": {"focusevent": {"default": "\"mousedown\"", "type": "String", "description": "The default DOM event that should be used to focus an Overlay", "guessedname": "value", "guessedtype": "property"}, "overlays": {"default": "null", "type": "YAHOO.widget.Overlay[]", "description": "The collection of registered Overlays in use by the OverlayManager", "guessedname": "suppressEvent", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Array", "name": "overlays", "description": "\tOptional. A collection of Overlays to register with the manager."}, {"type": "Object", "name": "userConfig", "description": "\t\tThe object literal representing the user configuration of the OverlayManager"}], "description": "OverlayManager is used for maintaining the focus status of multiple Overlays.* @namespace YAHOO.widget"}], "namespace": "YAHOO.widget", "module": "Container", "guessedname": "OverlayManager", "methods": {"hideAll": {"description": "Hides all Overlays in the manager.", "guessedname": "hideAll", "guessedtype": "function"}, "blurAll": {"description": "Removes focus from all registered Overlays in the manager", "guessedname": "blurAll", "guessedtype": "function"}, "register": {"return": {"type": "Boolean", "description": "True if any Overlays are registered."}, "params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\t\tAn Overlay to register with the manager."}, {"type": "YAHOO.widget.Overlay[]", "name": "overlay", "description": "\t\tAn array of Overlays to register with the manager."}], "description": "Registers an Overlay or an array of Overlays with the manager. Upon registration, the Overlay receives functions for focus and blur, along with CustomEvents for each.", "guessedname": "register", "guessedtype": "function"}, "focus": {"params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\tThe Overlay to focus"}, {"type": "String", "name": "overlay", "description": "\tThe id of the Overlay to focus"}], "description": "Focuses the specified Overlay", "guessedname": "focus", "guessedtype": "function"}, "remove": {"params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\tThe Overlay to remove"}, {"type": "String", "name": "overlay", "description": "\tThe id of the Overlay to remove"}], "description": "Removes the specified Overlay from the manager", "guessedname": "remove", "guessedtype": "function"}, "compareZIndexDesc": {"guessedname": "compareZIndexDesc", "return": {"type": "Number", "description": "0, 1, or -1, depending on where the Overlay should fall in the stacking order."}, "description": "Used for sorting the manager's Overlays by z-index.", "private": "", "guessedtype": "function"}, "init": {"params": [{"type": "YAHOO.widget.Overlay[]", "name": "overlays", "description": "\tOptional. A collection of Overlays to register with the manager."}, {"type": "Object", "name": "userConfig", "description": "\t\tThe object literal representing the user configuration of the OverlayManager"}], "description": "Initializes the OverlayManager", "guessedname": "init", "guessedtype": "function"}, "getActive": {"return": {"type": "YAHOO.widget.Overlay", "description": "The currently focused Overlay"}, "description": "Returns the currently focused Overlay", "guessedname": "getActive", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the OverlayManager"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "showAll": {"description": "Shows all Overlays in the manager.", "guessedname": "showAll", "guessedtype": "function"}, "find": {"return": {"type": "YAHOO.widget.Overlay", "description": "The requested Overlay, if found, or null if it cannot be located."}, "params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\t\tAn Overlay to locate within the manager"}, {"type": "String", "name": "overlay", "description": "\t\tAn Overlay id to locate within the manager"}], "description": "Attempts to locate an Overlay by instance or ID.", "guessedname": "find", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the default configuration of the OverlayManager", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "file": "OverlayManager.js", "guessedtype": "function", "shortname": "OverlayManager", "properties": {"activeOverlay": {"guessedname": "activeOverlay", "type": "YAHOO.widget.Overlay", "description": "The currently activated Overlay", "private": "", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The OverlayManager's Config object used for monitoring configuration properties.", "guessedname": "cfg", "guessedtype": "property"}, "YAHOO.widget.OverlayManager.CSS_FOCUSED": {"description": "The CSS class representing a focused Overlay", "static": "", "guessedname": "CSS_FOCUSED", "guessedtype": "property", "type": "String", "final": ""}, "contructor": {"type": "Function", "description": "The class's constructor function", "guessedname": "constructor", "guessedtype": "property"}, "overlays": {"type": "YAHOO.widget.Overlay[]", "description": "The array of Overlays that are currently registered", "guessedname": "overlays", "guessedtype": "property"}}, "description": "OverlayManager is used for maintaining the focus status of multiple Overlays.* @namespace YAHOO.widget"}, "YAHOO.util.Config": {"name": "YAHOO.util.Config", "constructors": [{"params": [{"type": "Object", "name": "owner", "description": "\tThe owner Object to which this Config Object belongs"}], "description": "Config is a utility used within an Object to allow the implementer to maintain a list of local configuration properties and listen for changes to those properties dynamically using CustomEvent. The initial values are also maintained so that the configuration can be reset at any given point to its initial state."}], "namespace": "YAHOO.util", "module": "Container", "events": {"configChangedEvent": {"description": "Object reference to the owner of this Config Object", "guessedname": "configChangedEvent", "guessedtype": "property"}}, "guessedname": "Config", "methods": {"fireQueue": {"description": "Fires the normalized list of queued property change events", "guessedname": "fireQueue", "guessedtype": "function"}, "YAHOO.util.Config.alreadySubscribed": {"return": {"type": "Boolean", "description": "true, if the function\/Object pair is already subscribed to the CustomEvent passed in"}, "description": "Checks to determine if a particular function\/Object pair are already subscribed to the specified CustomEvent", "static": "", "guessedname": "alreadySubscribed", "guessedtype": "function", "params": [{"type": "YAHOO.util.CustomEvent", "name": "evt", "description": "\tThe CustomEvent for which to check the subscriptions"}, {"type": "Function", "name": "fn", "description": "\tThe function to look for in the subscribers list"}, {"type": "Object", "name": "obj", "description": "\tThe execution scope Object for the subscription"}]}, "getProperty": {"return": {"type": "Object", "description": "The value of the specified property"}, "params": [{"type": "String", "name": "key", "description": "\tThe name of the property"}], "description": "Returns the value of specified property.", "guessedname": "getProperty", "guessedtype": "function"}, "addProperty": {"params": [{"type": "String", "name": "key", "description": "\tThe configuration property's name"}, {"type": "Object", "name": "propertyObject", "description": "\tThe Object containing all of this property's arguments"}], "description": "Adds a property to the Config Object's private config hash.", "guessedname": "addProperty", "guessedtype": "function"}, "queueProperty": {"return": {"type": "Boolean", "description": "true, if the set was successful, false if it failed."}, "params": [{"type": "String", "name": "key", "description": "\tThe name of the property"}, {"type": "String", "name": "value", "description": "\tThe value to set the property to"}], "description": "Sets the value of a property and queues its event to execute. If the event is already scheduled to execute, it is\r\nmoved from its current position to the end of the queue.", "guessedname": "queueProperty", "guessedtype": "function"}, "checkNumber": {"return": {"type": "Boolean", "description": "true, if the value is valid"}, "params": [{"type": "Object", "name": "val", "description": "\tThe value to validate"}], "description": "Validates that the value passed in is a number.", "guessedname": "checkNumber", "guessedtype": "function"}, "outputEventQueue": {"return": {"type": "String", "description": "The string list of CustomEvents currently queued for execution"}, "description": "Returns a string representation of the Config object's current CustomEvent queue", "guessedname": "outputEventQueue", "guessedtype": "function"}, "resetProperty": {"return": {"type": "Boolean", "description": "True is the property was reset, false if not"}, "params": [{"type": "String", "name": "key", "description": "\tThe name of the property"}], "description": "Resets the specified property's value to its initial value.", "guessedname": "resetProperty", "guessedtype": "function"}, "applyConfig": {"params": [{"type": "Object", "name": "userConfig", "description": "\tThe configuration Object literal"}, {"type": "Boolean", "name": "init", "description": "\t\tWhen set to true, the initialConfig will be set to the userConfig passed in, so that calling a reset will reset the properties to the passed values."}], "description": "Applies a key-value Object literal to the configuration, replacing any existing values, and queueing the property events.\r\nAlthough the values will be set, fireQueue() must be called for their associated events to execute.", "guessedname": "applyConfig", "guessedtype": "function"}, "refresh": {"description": "Refires the events for all configuration properties using their current values.", "guessedname": "refresh", "guessedtype": "function"}, "subscribeToConfigEvent": {"return": {"type": "Boolean", "description": "True, if the subscription was successful, otherwise false."}, "params": [{"type": "String", "name": "key", "description": "\t\t\tThe property name"}, {"type": "Function", "name": "handler", "description": "\t\tThe handler function to use subscribe to the property's event"}, {"type": "Object", "name": "obj", "description": "\t\t\tThe Object to use for scoping the event handler (see CustomEvent documentation)"}, {"type": "Boolean", "name": "override", "description": "\tOptional. If true, will override \"this\" within the handler to map to the scope Object passed into the method."}], "description": "Subscribes an external handler to the change event for any given property.", "guessedname": "subscribeToConfigEvent", "guessedtype": "function"}, "checkBoolean": {"return": {"type": "Boolean", "description": "true, if the value is valid"}, "params": [{"type": "Object", "name": "val", "description": "\tThe value to validate"}], "description": "Validates that the value passed in is a Boolean.", "guessedname": "checkBoolean", "guessedtype": "function"}, "init": {"params": [{"type": "Object", "name": "owner", "description": "\tThe owner Object to which this Config Object belongs"}], "description": "Initializes the configuration Object and all of its local members.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The Config object in string format."}, "description": "Returns a string representation of the Config object", "guessedname": "toString", "guessedtype": "function"}, "refireEvent": {"params": [{"type": "String", "name": "key", "description": "\tThe name of the property"}], "description": "Fires the event for a property using the property's current value.", "guessedname": "refireEvent", "guessedtype": "function"}, "getConfig": {"return": {"type": "Object", "description": "The current config, represented in a key-value map"}, "description": "Returns a key-value configuration map of the values currently set in the Config Object.", "guessedname": "getConfig", "guessedtype": "function"}, "setProperty": {"return": {"type": "Boolean", "description": "True, if the set was successful, false if it failed."}, "params": [{"type": "String", "name": "key", "description": "\t\tThe name of the property"}, {"type": "String", "name": "value", "description": "\t\tThe value to set the property to"}, {"type": "Boolean", "name": "silent", "description": "\tWhether the value should be set silently, without firing the property event."}], "description": "Sets the value of a property. If the silent property is passed as true, the property's event will not be fired.", "guessedname": "setProperty", "guessedtype": "function"}, "fireEvent": {"guessedname": "fireEvent", "params": [{"type": "String", "name": "key", "description": "\t\t\tThe configuration property's name"}, {"type": "value", "name": "Object", "description": "\t\tThe value of the correct type for the property"}], "description": "Fires a configuration property event using the specified value.", "private": "", "guessedtype": "function"}, "unsubscribeFromConfigEvent": {"return": {"type": "Boolean", "description": "True, if the unsubscription was successful, otherwise false."}, "params": [{"type": "String", "name": "key", "description": "\t\t\tThe property name"}, {"type": "Function", "name": "handler", "description": "\t\tThe handler function to use subscribe to the property's event"}, {"type": "Object", "name": "obj", "description": "\t\t\tThe Object to use for scoping the event handler (see CustomEvent documentation)"}], "description": "Unsubscribes an external handler from the change event for any given property.", "guessedname": "unsubscribeFromConfigEvent", "guessedtype": "function"}}, "file": "Config.js", "guessedtype": "function", "shortname": "Config", "properties": {"owner": {"type": "Object", "description": "Object reference to the owner of this Config Object", "guessedname": "owner", "guessedtype": "property"}, "queueInProgress": {"type": "Boolean", "description": "Boolean flag that specifies whether a queue is currently being executed", "guessedname": "queueInProgress", "guessedtype": "property"}, "initialConfig": {"guessedname": "initialConfig", "type": "Object", "description": "Maintains the local collection of configuration property objects as they were initially applied.\r\nThis object is used when resetting a property.", "private": "", "guessedtype": "property"}, "config": {"guessedname": "config", "type": "Object", "description": "Maintains the local collection of configuration property objects and their specified values", "private": "", "guessedtype": "property"}, "eventQueue": {"guessedname": "eventQueue", "type": "Object", "description": "Maintains the local, normalized CustomEvent queue", "private": "", "guessedtype": "property"}}, "description": "Config is a utility used within an Object to allow the implementer to maintain a list of local configuration properties and listen for changes to those properties dynamically using CustomEvent. The initial values are also maintained so that the configuration can be reset at any given point to its initial state."}, "YAHOO.widget.Overlay": {"name": "YAHOO.widget.Overlay", "configs": {"iframe": {"default": "true for IE6 and below, false for all others", "type": "Boolean", "description": "True if the Overlay should have an IFRAME shim (for correcting the select z-index bug in IE6 and below).", "guessedname": "value", "guessedtype": "property"}, "constraintoviewport": {"default": "false", "type": "Boolean", "description": "True if the Overlay should be prevented from being positioned out of the viewport.", "guessedname": "value", "guessedtype": "property"}, "height": {"default": "null", "type": "String", "description": "CSS height of the Overlay.", "guessedname": "handler", "guessedtype": "property"}, "zIndex": {"default": "null", "type": "Number", "description": "CSS z-index of the Overlay.", "guessedname": "value", "guessedtype": "property"}, "width": {"default": "null", "type": "String", "description": "CSS width of the Overlay.", "guessedname": "handler", "guessedtype": "property"}, "xy": {"default": "null", "type": "Number[]", "description": "An array with the absolute x and y positions of the Overlay", "guessedname": "handler", "guessedtype": "property"}, "context": {"default": "null", "type": "Array", "description": "The array of context arguments for context-sensitive positioning. The format is: [id or element, element corner, context corner]. For example, setting this property to [\"img1\", \"tl\", \"bl\"] would align the Overlay's top left corner to the context element's bottom left corner.", "guessedname": "handler", "guessedtype": "property"}, "y": {"default": "null", "type": "Number", "description": "The absolute y-coordinate position of the Overlay", "guessedname": "handler", "guessedtype": "property"}, "x": {"default": "null", "type": "Number", "description": "The absolute x-coordinate position of the Overlay", "guessedname": "handler", "guessedtype": "property"}, "fixedcenter": {"default": "false", "type": "Boolean", "description": "True if the Overlay should be anchored to the center of the viewport.", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Overlay <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing 10\/23\/2006the configuration that should be set for this Overlay. See configuration documentation for more details."}], "description": "Overlay is a Module that is absolutely positioned above the page flow. It has convenience methods for positioning and sizing, as well as options for controlling zIndex and constraining the Overlay's position to the current visible viewport. Overlay also contains a dynamicly generated IFRAME which is placed beneath it for Internet Explorer 6 and 5.x so that it will be properly rendered above SELECT elements."}], "namespace": "YAHOO.widget", "module": "Container", "events": {"YAHOO.widget.Overlay.windowScrollEvent": {"description": "A singleton CustomEvent used for reacting to the DOM event for window scroll", "guessedname": "windowScrollEvent", "guessedtype": "property"}, "moveEvent": {"params": [{"type": "Number", "name": "x", "description": "\tx coordinate"}, {"type": "Number", "name": "y", "description": "\ty coordinate"}], "description": "CustomEvent fired after the Overlay is moved.", "guessedname": "moveEvent", "guessedtype": "property"}, "beforeMoveEvent": {"params": [{"type": "Number", "name": "x", "description": "\tx coordinate"}, {"type": "Number", "name": "y", "description": "\ty coordinate"}], "description": "CustomEvent fired before the Overlay is moved.", "guessedname": "beforeMoveEvent", "guessedtype": "property"}, "YAHOO.widget.Overlay.windowResizeEvent": {"description": "A singleton CustomEvent used for reacting to the DOM event for window resize", "guessedname": "windowResizeEvent", "guessedtype": "property"}}, "guessedname": "Overlay", "methods": {"moveTo": {"params": [{"type": "Number", "name": "x", "description": "\tThe Overlay's new x position"}, {"type": "Number", "name": "y", "description": "\tThe Overlay's new y position"}], "description": "Moves the Overlay to the specified position. This function is identical to calling this.cfg.setProperty(\"xy\", [x,y]);", "guessedname": "moveTo", "guessedtype": "function"}, "showIframe": {"description": "Shows the iframe shim, if it has been enabled", "guessedname": "showIframe", "guessedtype": "function"}, "configFixedCenter": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"fixedcenter\" property is changed.", "guessedname": "configFixedCenter", "guessedtype": "function"}, "YAHOO.widget.Overlay.windowResizeHandler": {"static": "", "params": [{"type": "DOMEvent", "name": "e", "description": " The DOM resize event"}], "description": "The DOM event handler used to fire the CustomEvent for window resize", "guessedname": "windowResizeHandler", "guessedtype": "function"}, "showMacGeckoScrollbars": {"description": "Removes a special CSS class from the Overlay when Mac\/Gecko is in use, to work around a Gecko bug where\r\nscrollbars cannot be hidden. See https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=187435", "guessedname": "showMacGeckoScrollbars", "guessedtype": "function"}, "hideMacGeckoScrollbars": {"description": "Adds a special CSS class to the Overlay when Mac\/Gecko is in use, to work around a Gecko bug where\r\nscrollbars cannot be hidden. See https:\/\/bugzilla.mozilla.org\/show_bug.cgi?id=187435", "guessedname": "hideMacGeckoScrollbars", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Overlay which are fired automatically at appropriate times by the Overlay class.", "guessedname": "initEvents", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Overlay <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Overlay"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details."}], "description": "The Overlay initialization method, which is executed for Overlay and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "configXY": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"xy\" property is changed.", "guessedname": "configXY", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Overlay."}, "description": "Returns a String representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "syncPosition": {"description": "Synchronizes the Panel's \"xy\", \"x\", and \"y\" properties with the Panel's position in the DOM. This is primarily used to update position information during drag & drop.", "guessedname": "syncPosition", "guessedtype": "function"}, "hideIframe": {"description": "Hides the iframe shim, if it has been enabled", "guessedname": "hideIframe", "guessedtype": "function"}, "configHeight": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"height\" property is changed.", "guessedname": "configHeight", "guessedtype": "function"}, "configContext": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"context\" property is changed.", "guessedname": "configContext", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe resize DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"visible\" property is changed. This method is responsible for firing showEvent and hideEvent.", "guessedname": "configVisible", "guessedtype": "function"}, "enforceConstraints": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler executed when the moveEvent is fired, if the \"constraintoviewport\" is set to true.", "guessedname": "enforceConstraints", "guessedtype": "function"}, "configWidth": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"width\" property is changed.", "guessedname": "configWidth", "guessedtype": "function"}, "destroy": {"description": "Removes the Overlay element from the DOM and sets all child elements to null.", "guessedname": "destroy", "guessedtype": "function"}, "configConstrainToViewport": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"constraintoviewport\" property is changed.", "guessedname": "configConstrainToViewport", "guessedtype": "function"}, "YAHOO.widget.Overlay.windowScrollHandler": {"static": "", "params": [{"type": "DOMEvent", "name": "e", "description": " The DOM scroll event"}], "description": "The DOM event handler used to fire the CustomEvent for window scroll", "guessedname": "windowScrollHandler", "guessedtype": "function"}, "center": {"description": "Centers the container in the viewport.", "guessedname": "center", "guessedtype": "function"}, "align": {"params": [{"type": "String", "name": "elementAlign", "description": "\t\tThe String representing the corner of the Overlay that should be aligned to the context element"}, {"type": "String", "name": "contextAlign", "description": "\t\tThe corner of the context element that the elementAlign corner should stick to."}], "description": "Aligns the Overlay to its context element using the specified corner points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, and BOTTOM_RIGHT.", "guessedname": "align", "guessedtype": "function"}, "configIframe": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"iframe\" property is changed.", "guessedname": "configIframe", "guessedtype": "function"}, "configY": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"y\" property is changed.", "guessedname": "configY", "guessedtype": "function"}, "configX": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"x\" property is changed.", "guessedname": "configX", "guessedtype": "function"}, "configzIndex": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"zIndex\" property is changed.", "guessedname": "configzIndex", "guessedtype": "function"}, "doCenterOnDOMEvent": {"description": "Center event handler used for centering on scroll\/resize, but only if the Overlay is visible", "guessedname": "doCenterOnDOMEvent", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the Overlay's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}}, "extends": "YAHOO.widget.Module", "superclass": "YAHOO.widget.Module", "file": "Overlay.js", "guessedtype": "function", "shortname": "Overlay", "properties": {"YAHOO.widget.Overlay._initialized": {"guessedname": "_initialized", "type": "Boolean", "description": "A boolean that indicated whether the window resize and scroll events have already been subscribed to.", "private": "", "guessedtype": "property"}, "YAHOO.widget.Overlay.CSS_OVERLAY": {"description": "Constant representing the default CSS class used for an Overlay", "static": "", "guessedname": "CSS_OVERLAY", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.BOTTOM_RIGHT": {"description": "Constant representing the bottom right corner of an element, used for configuring the context element alignment", "static": "", "guessedname": "BOTTOM_RIGHT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.BOTTOM_LEFT": {"description": "Constant representing the top bottom left corner of an element, used for configuring the context element alignment", "static": "", "guessedname": "BOTTOM_LEFT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.TOP_RIGHT": {"description": "Constant representing the top right corner of an element, used for configuring the context element alignment", "static": "", "guessedname": "TOP_RIGHT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.TOP_LEFT": {"description": "Constant representing the top left corner of an element, used for configuring the context element alignment", "static": "", "guessedname": "TOP_LEFT", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Overlay.IFRAME_SRC": {"description": "The URL that will be placed in the iframe", "static": "", "guessedname": "IFRAME_SRC", "guessedtype": "property", "type": "String", "final": ""}}, "description": "Overlay is a Module that is absolutely positioned above the page flow. It has convenience methods for positioning and sizing, as well as options for controlling zIndex and constraining the Overlay's position to the current visible viewport. Overlay also contains a dynamicly generated IFRAME which is placed beneath it for Internet Explorer 6 and 5.x so that it will be properly rendered above SELECT elements."}, "YAHOO.widget.ContainerEffect": {"name": "YAHOO.widget.ContainerEffect", "constructors": [{"params": [{"type": "YAHOO.widget.Overlay", "name": "overlay", "description": "\t\tThe Overlay that the animation should be associated with"}, {"type": "Object", "name": "attrIn", "description": "\t\tThe object literal representing the animation arguments to be used for the animate-in transition. The arguments for this literal are: attributes(object, see YAHOO.util.Anim for description), duration(Number), and method(i.e. YAHOO.util.Easing.easeIn)."}, {"type": "Object", "name": "attrOut", "description": "\t\tThe object literal representing the animation arguments to be used for the animate-out transition. The arguments for this literal are: attributes(object, see YAHOO.util.Anim for description), duration(Number), and method(i.e. YAHOO.util.Easing.easeIn)."}, {"type": "HTMLElement", "name": "targetElement", "description": "\tOptional. The target element that should be animated during the transition. Defaults to overlay.element."}, {"type": "class", "name": "Optional.", "description": " The animation class to instantiate. Defaults to YAHOO.util.Anim. Other options include YAHOO.util.Motion."}], "description": "ContainerEffect encapsulates animation transitions that are executed when an Overlay is shown or hidden."}], "namespace": "YAHOO.widget", "module": "Container", "guessedname": "ContainerEffect", "methods": {"handleStartAnimateIn": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onStart handler for the in-animation.", "guessedname": "handleStartAnimateIn", "guessedtype": "function"}, "handleStartAnimateOut": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onStart handler for the out-animation.", "guessedname": "handleStartAnimateOut", "guessedtype": "function"}, "animateOut": {"description": "Triggers the out-animation.", "guessedname": "animateOut", "guessedtype": "function"}, "SLIDE": {"return": {"type": "ContainerEffect", "description": "The configured ContainerEffect object"}, "description": "A pre-configured ContainerEffect instance that can be used for sliding an overlay in and out.", "static": "", "guessedname": "SLIDE", "guessedtype": "function", "params": [{"type": "Overlay", "name": "The", "description": " Overlay object to animate"}, {"type": "Number", "name": "The", "description": " duration of the animation"}]}, "handleCompleteAnimateOut": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onComplete handler for the out-animation.", "guessedname": "handleCompleteAnimateOut", "guessedtype": "function"}, "handleTweenAnimateIn": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onTween handler for the in-animation.", "guessedname": "handleTweenAnimateIn", "guessedtype": "function"}, "handleTweenAnimateOut": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onTween handler for the out-animation.", "guessedname": "handleTweenAnimateOut", "guessedtype": "function"}, "init": {"description": "Initializes the animation classes and events.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the ContainerEffect"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "FADE": {"return": {"type": "ContainerEffect", "description": "The configured ContainerEffect object"}, "description": "A pre-configured ContainerEffect instance that can be used for fading an overlay in and out.", "static": "", "guessedname": "FADE", "guessedtype": "function", "params": [{"type": "Overlay", "name": "The", "description": " Overlay object to animate"}, {"type": "Number", "name": "The", "description": " duration of the animation"}]}, "handleCompleteAnimateIn": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments"}, {"type": "Object", "name": "obj", "description": "\tThe scope object"}], "description": "The default onComplete handler for the in-animation.", "guessedname": "handleCompleteAnimateIn", "guessedtype": "function"}, "animateIn": {"description": "Triggers the in-animation.", "guessedname": "animateIn", "guessedtype": "function"}}, "file": "ContainerEffect.js", "guessedtype": "function", "shortname": "ContainerEffect", "properties": {"attrOut": {"type": "Object", "description": "The animation attributes to use when transitioning out of view", "guessedname": "attrOut", "guessedtype": "property"}, "animClass": {"type": "class", "description": "The animation class to use for animating the overlay", "guessedname": "animClass", "guessedtype": "property"}, "targetElement": {"type": "HTMLElement", "description": "The target element to be animated", "guessedname": "targetElement", "guessedtype": "property"}, "attrIn": {"type": "Object", "description": "The animation attributes to use when transitioning into view", "guessedname": "attrIn", "guessedtype": "property"}, "overlay": {"type": "YAHOO.widget.Overlay", "description": "The overlay to animate", "guessedname": "overlay", "guessedtype": "property"}}, "description": "ContainerEffect encapsulates animation transitions that are executed when an Overlay is shown or hidden."}, "YAHOO.widget.Module": {"name": "YAHOO.widget.Module", "configs": {"visible": {"default": "true", "type": "Boolean", "description": "Specifies whether the Module is visible on the page.", "guessedname": "value", "guessedtype": "property"}, "monitorresize": {"default": "true", "type": "Boolean", "description": "Specifies whether to create a special proxy iframe to monitor for user font resizing in the document", "guessedname": "value", "guessedtype": "property"}, "effect": {"default": "null", "type": "Object", "description": "Object or array of objects representing the ContainerEffect classes that are active for animating the container.", "guessedname": "suppressEvent", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\t\t\tThe element ID representing the Module <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\t\tThe element representing the Module"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration Object literal containing the configuration that should be set for this module. See configuration documentation for more details."}], "description": "Module is a JavaScript representation of the Standard Module Format. Standard Module Format is a simple standard for markup containers where child nodes representing the header, body, and footer of the content are denoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. Module is the base class for all other classes in the YUI Container package."}], "namespace": "YAHOO.widget", "module": "Container", "events": {"initEvent": {"params": [{"type": "class", "name": "classRef", "description": "\tclass reference of the initializing class, such as this.beforeInitEvent.fire(YAHOO.widget.Module)"}], "description": "CustomEvent fired after class initalization.", "guessedname": "initEvent", "guessedtype": "property"}, "hideEvent": {"description": "CustomEvent fired after the Module is hidden", "guessedname": "hideEvent", "guessedtype": "property"}, "beforeHideEvent": {"description": "CustomEvent fired before the Module is hidden", "guessedname": "beforeHideEvent", "guessedtype": "property"}, "changeBodyEvent": {"params": [{"type": "String\/HTMLElement", "name": "content", "description": "\tString\/element representing the new body content"}], "description": "CustomEvent fired when the body content of the Module is modified", "guessedname": "changeBodyEvent", "guessedtype": "property"}, "beforeRenderEvent": {"description": "CustomEvent fired before the Module is rendered", "guessedname": "beforeRenderEvent", "guessedtype": "property"}, "changeContentEvent": {"description": "CustomEvent fired when the content of the Module is modified", "guessedname": "changeContentEvent", "guessedtype": "property"}, "beforeShowEvent": {"description": "CustomEvent fired before the Module is shown", "guessedname": "beforeShowEvent", "guessedtype": "property"}, "changeFooterEvent": {"params": [{"type": "String\/HTMLElement", "name": "content", "description": "\tString\/element representing the new footer content"}], "description": "CustomEvent fired when the footer content of the Module is modified", "guessedname": "changeFooterEvent", "guessedtype": "property"}, "renderEvent": {"description": "CustomEvent fired after the Module is rendered", "guessedname": "renderEvent", "guessedtype": "property"}, "showEvent": {"description": "CustomEvent fired after the Module is shown", "guessedname": "showEvent", "guessedtype": "property"}, "beforeInitEvent": {"params": [{"type": "class", "name": "classRef", "description": "\tclass reference of the initializing class, such as this.beforeInitEvent.fire(YAHOO.widget.Module)"}], "description": "CustomEvent fired prior to class initalization.", "guessedname": "beforeInitEvent", "guessedtype": "property"}, "appendEvent": {"description": "CustomEvent fired when the Module is appended to the DOM", "guessedname": "appendEvent", "guessedtype": "property"}, "changeHeaderEvent": {"params": [{"type": "String\/HTMLElement", "name": "content", "description": "\tString\/element representing the new header content"}], "description": "CustomEvent fired when the header content of the Module is modified", "guessedname": "changeHeaderEvent", "guessedtype": "property"}, "destroyEvent": {"description": "CustomEvent fired when the Module is destroyed", "guessedname": "destroyEvent", "guessedtype": "property"}}, "guessedname": "Module", "methods": {"configMonitorResize": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Default event handler for the \"monitorresize\" configuration property", "guessedname": "configMonitorResize", "guessedtype": "function"}, "appendToHeader": {"params": [{"type": "HTMLElement", "name": "element", "description": "\tThe element to append to the header"}], "description": "Appends the passed element to the header. If no header is present, one will be automatically created.", "guessedname": "appendToHeader", "guessedtype": "function"}, "setBody": {"params": [{"type": "String", "name": "bodyContent", "description": "\tThe HTML used to set the body <em>OR<\/em>"}, {"type": "HTMLElement", "name": "bodyContent", "description": "\tThe HTMLElement to append to the body"}], "description": "Sets the Module's body content to the HTML specified, or appends the passed element to the body. If no body is present, one will be automatically created.", "guessedname": "setBody", "guessedtype": "function"}, "hide": {"description": "Hides the Module element by setting the visible configuration property to false. Also fires two events: beforeHideEvent prior to the visibility change, and hideEvent after.", "guessedname": "hide", "guessedtype": "function"}, "render": {"return": {"type": "Boolean", "description": "Success or failure of the render"}, "params": [{"type": "String", "name": "appendToNode", "description": "\tThe element id to which the Module should be appended to prior to rendering <em>OR<\/em>"}, {"type": "HTMLElement", "name": "appendToNode", "description": "\tThe element to which the Module should be appended to prior to rendering"}, {"type": "HTMLElement", "name": "moduleElement", "description": "\tOPTIONAL. The element that represents the actual Standard Module container."}], "description": "Renders the Module by inserting the elements that are not already in the main Module into their correct places. Optionally appends the Module to the specified node prior to the render's execution. NOTE: For Modules without existing markup, the appendToNode argument is REQUIRED. If this argument is ommitted and the current element is not present in the document, the function will return false, indicating that the render was a failure.", "guessedname": "render", "guessedtype": "function"}, "onDomResize": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe DOM resize event"}, {"type": "Object", "name": "obj", "description": "\tThe scope object passed to the handler"}], "description": "Event handler fired when the resize monitor element is resized.", "guessedname": "onDomResize", "guessedtype": "function"}, "initEvents": {"description": "Initializes the custom events for Module which are fired automatically at appropriate times by the Module class.", "guessedname": "initEvents", "guessedtype": "function"}, "setFooter": {"params": [{"type": "String", "name": "footerContent", "description": "\tThe HTML used to set the footer <em>OR<\/em>"}, {"type": "HTMLElement", "name": "footerContent", "description": "\tThe HTMLElement to append to the footer"}], "description": "Sets the Module's footer content to the HTML specified, or appends the passed element to the footer. If no footer is present, one will be automatically created.", "guessedname": "setFooter", "guessedtype": "function"}, "initResizeMonitor": {"description": "Initialized an empty IFRAME that is placed out of the visible area that can be used to detect text resize.", "guessedname": "initResizeMonitor", "guessedtype": "function"}, "appendToBody": {"params": [{"type": "HTMLElement", "name": "element", "description": "\tThe element to append to the body"}], "description": "Appends the passed element to the body. If no body is present, one will be automatically created.", "guessedname": "appendToBody", "guessedtype": "function"}, "appendToFooter": {"params": [{"type": "HTMLElement", "name": "element", "description": "\tThe element to append to the footer"}], "description": "Appends the passed element to the footer. If no footer is present, one will be automatically created.", "guessedname": "appendToFooter", "guessedtype": "function"}, "configVisible": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "Default event handler for changing the visibility property of a Module. By default, this is achieved by switching the \"display\" style between \"block\" and \"none\".\r\nThis method is responsible for firing showEvent and hideEvent.", "guessedname": "configVisible", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Module <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Module"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration Object literal containing the configuration that should be set for this module. See configuration documentation for more details."}], "description": "The Module class's initialization method, which is executed for Module and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.", "guessedname": "init", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Module"}, "description": "Returns a String representation of the Object.", "guessedname": "toString", "guessedtype": "function"}, "initDefaultConfig": {"description": "Initializes the custom events for Module which are fired automatically at appropriate times by the Module class.", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "show": {"description": "Shows the Module element by setting the visible configuration property to true. Also fires two events: beforeShowEvent prior to the visibility change, and showEvent after.", "guessedname": "show", "guessedtype": "function"}, "destroy": {"description": "Removes the Module element from the DOM and sets all child elements to null.", "guessedname": "destroy", "guessedtype": "function"}, "setHeader": {"params": [{"type": "String", "name": "headerContent", "description": "\tThe HTML used to set the header <em>OR<\/em>"}, {"type": "HTMLElement", "name": "headerContent", "description": "\tThe HTMLElement to append to the header"}], "description": "Sets the Module's header content to the HTML specified, or appends the passed element to the header. If no header is present, one will be automatically created.", "guessedname": "setHeader", "guessedtype": "function"}}, "file": "Module.js", "guessedtype": "function", "shortname": "Module", "properties": {"body": {"type": "HTMLElement", "description": "The body element, denoted with CSS class \"bd\"", "guessedname": "body", "guessedtype": "property"}, "isSecure": {"type": "Boolean", "description": "Boolean representing whether or not the current browsing context is secure (https)", "guessedname": "isSecure", "guessedtype": "function"}, "YAHOO.widget.Module.CSS_MODULE": {"description": "Constant for the default CSS class name that represents a Module", "static": "", "guessedname": "CSS_MODULE", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_HEADER": {"description": "Constant representing the module header", "static": "", "guessedname": "CSS_HEADER", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_FOOTER": {"description": "Constant representing the module footer", "static": "", "guessedname": "CSS_FOOTER", "guessedtype": "property", "type": "String", "final": ""}, "contructor": {"type": "Function", "description": "The class's constructor function", "guessedname": "constructor", "guessedtype": "property"}, "platform": {"type": "String", "description": "String representing the current user-agent platform", "guessedname": "platform", "guessedtype": "function"}, "element": {"type": "HTMLElement", "description": "The main module element that contains the header, body, and footer", "guessedname": "element", "guessedtype": "property"}, "YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL": {"description": "Constant representing the url for the \"src\" attribute of the iframe used to monitor changes to the browser's base font size", "static": "", "guessedname": "RESIZE_MONITOR_SECURE_URL", "guessedtype": "property", "type": "String", "final": ""}, "header": {"type": "HTMLElement", "description": "The header element, denoted with CSS class \"hd\"", "guessedname": "header", "guessedtype": "property"}, "YAHOO.widget.Module.IMG_ROOT": {"description": "Constant representing the prefix path to use for non-secure images", "static": "", "guessedname": "IMG_ROOT", "guessedtype": "property", "type": "String", "final": ""}, "imageRoot": {"type": "String", "description": "The String representing the image root", "guessedname": "imageRoot", "guessedtype": "property"}, "cfg": {"type": "YAHOO.util.Config", "description": "The Module's Config object used for monitoring configuration properties.", "guessedname": "cfg", "guessedtype": "property"}, "id": {"type": "String", "description": "The id of the element", "guessedname": "id", "guessedtype": "property"}, "footer": {"type": "HTMLElement", "description": "The footer element, denoted with CSS class \"ft\"", "guessedname": "footer", "guessedtype": "property"}, "YAHOO.widget.Module.IMG_ROOT_SSL": {"description": "Constant representing the prefix path to use for securely served images", "static": "", "guessedname": "IMG_ROOT_SSL", "guessedtype": "property", "type": "String", "final": ""}, "YAHOO.widget.Module.CSS_BODY": {"description": "Constant representing the module body", "static": "", "guessedname": "CSS_BODY", "guessedtype": "property", "type": "String", "final": ""}, "browser": {"type": "String", "description": "String representing the current user-agent browser", "guessedname": "browser", "guessedtype": "function"}}, "description": "Module is a JavaScript representation of the Standard Module Format. Standard Module Format is a simple standard for markup containers where child nodes representing the header, body, and footer of the content are denoted using the CSS classes \"hd\", \"bd\", and \"ft\" respectively. Module is the base class for all other classes in the YUI Container package."}, "YAHOO.widget.Tooltip": {"name": "YAHOO.widget.Tooltip", "configs": {"container": {"default": "document.body", "type": "HTMLElement\/String", "description": "Specifies the container element that the Tooltip's markup should be rendered into.", "guessedname": "value", "guessedtype": "property"}, "text": {"default": "null", "type": "String", "description": "Specifies the Tooltip's text.", "guessedname": "handler", "guessedtype": "property"}, "showdelay": {"default": "200", "type": "Number", "description": "The number of milliseconds to wait before showing a Tooltip on mouseover.", "guessedname": "value", "guessedtype": "property"}, "preventoverlap": {"default": "true", "type": "Boolean", "description": "Specifies whether the Tooltip should be kept from overlapping its context element.", "guessedname": "value", "guessedtype": "property"}, "context": {"default": "null", "type": "HTMLElement[]\/String[]", "description": "Specifies the element or elements that the Tooltip should be anchored to on mouseover."}, "autodismissdelay": {"default": "5000", "type": "Number", "description": "The number of milliseconds to wait before automatically dismissing a Tooltip after the mouse has been resting on the context element.", "guessedname": "value", "guessedtype": "property"}, "hidedelay": {"default": "250", "type": "Number", "description": "The number of milliseconds to wait before hiding a Tooltip on mouseover.", "guessedname": "value", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Tooltip <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Tooltip"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Overlay. See configuration documentation for more details."}], "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, displaying when the user mouses over a particular element, and disappearing on mouse out."}], "namespace": "YAHOO.widget", "module": "Container", "guessedname": "Tooltip", "methods": {"initDefaultConfig": {"description": "Initializes the class's configurable properties which can be changed using the Overlay's Config object (cfg).", "guessedname": "initDefaultConfig", "guessedtype": "function"}, "doShow": {"return": {"type": "Number", "description": "The process ID of the timeout function associated with doShow"}, "params": [{"type": "DOMEvent", "name": "e", "description": "\tThe current DOM event"}], "description": "Processes the showing of the Tooltip by setting the timeout delay and offset of the Tooltip.", "guessedname": "doShow", "guessedtype": "function"}, "onContextMouseOver": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe current DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe object argument"}], "description": "The default event handler fired when the user mouses over the context element.", "guessedname": "onContextMouseOver", "guessedtype": "function"}, "doHide": {"description": "Sets the timeout for the auto-dismiss delay, which by default is 5 seconds, meaning that a tooltip will automatically dismiss itself after 5 seconds of being displayed.", "guessedname": "doHide", "guessedtype": "function"}, "onContextMouseOut": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe current DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe object argument"}], "description": "The default event handler fired when the user mouses out of the context element.", "guessedname": "onContextMouseOut", "guessedtype": "function"}, "configContainer": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"container\" property is changed.", "guessedname": "configContainer", "guessedtype": "function"}, "init": {"params": [{"type": "String", "name": "el", "description": "\tThe element ID representing the Tooltip <em>OR<\/em>"}, {"type": "HTMLElement", "name": "el", "description": "\tThe element representing the Tooltip"}, {"type": "Object", "name": "userConfig", "description": "\tThe configuration object literal containing the configuration that should be set for this Tooltip. See configuration documentation for more details."}], "description": "The Tooltip initialization method. This method is automatically called by the constructor. A Tooltip is automatically rendered by the init method, and it also is set to be invisible by default, and constrained to viewport by default as well.", "guessedname": "init", "guessedtype": "function"}, "onContextMouseMove": {"params": [{"type": "DOMEvent", "name": "e", "description": "\tThe current DOM event"}, {"type": "Object", "name": "obj", "description": "\tThe object argument"}], "description": "The default event handler fired when the user moves the mouse while over the context element.", "guessedname": "onContextMouseMove", "guessedtype": "function"}, "configText": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"text\" property is changed.", "guessedname": "configText", "guessedtype": "function"}, "preventOverlay": {"params": [{"type": "Number", "name": "pageX", "description": "\tThe x coordinate position of the mouse pointer"}, {"type": "Number", "name": "pageY", "description": "\tThe y coordinate position of the mouse pointer"}], "description": "Fired when the Tooltip is moved, this event handler is used to prevent the Tooltip from overlapping with its context element.", "guessedname": "preventOverlap", "guessedtype": "function"}, "toString": {"return": {"type": "String", "description": "The string representation of the Tooltip"}, "description": "Returns a string representation of the object.", "guessedname": "toString", "guessedtype": "function"}, "configContext": {"params": [{"type": "String", "name": "type", "description": "\tThe CustomEvent type (usually the property name)"}, {"type": "Object[]", "name": "args", "description": "\tThe CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property."}, {"type": "Object", "name": "obj", "description": "\tThe scope object. For configuration handlers, this will usually equal the owner."}], "description": "The default event handler fired when the \"context\" property is changed.", "guessedname": "configContext", "guessedtype": "function"}}, "extends": "YAHOO.widget.Overlay", "superclass": "YAHOO.widget.Overlay", "file": "Tooltip.js", "guessedtype": "function", "shortname": "Tooltip", "properties": {"YAHOO.widget.Tooltip.CSS_TOOLTIP": {"description": "Constant representing the Tooltip CSS class", "static": "", "guessedname": "CSS_TOOLTIP", "guessedtype": "property", "type": "String", "final": ""}, "showProcId": {"type": "int", "description": "The unique process ID associated with the thread responsible for showing the Tooltip.", "guessedname": "showProcId", "guessedtype": "property"}}, "description": "Tooltip is an implementation of Overlay that behaves like an OS tooltip, displaying when the user mouses over a particular element, and disappearing on mouse out."}}, "modules": {"Container": {"classlist": ["YAHOO.util.Config", "YAHOO.widget.ContainerEffect", "YAHOO.widget.Dialog", "YAHOO.util.KeyListener", "YAHOO.widget.Module", "YAHOO.widget.Overlay", "YAHOO.widget.OverlayManager", "YAHOO.widget.Panel", "YAHOO.widget.SimpleDialog", "YAHOO.widget.Tooltip"], "requires": "yahoo,dom,event,dragdrop,animation", "name": "Container", "filelist": ["Config.js", "ContainerEffect.js", "Dialog.js", "KeyListener.js", "Module.js", "Overlay.js", "OverlayManager.js", "Panel.js", "SimpleDialog.js", "Tooltip.js"], "description": "The Container family of components is designed to enable developers to create different kinds of content-containing modules on the web. Module and Overlay are the most basic containers, and they can be used directly or extended to build custom containers. Also part of the Container family are four UI controls that extend Module and Overlay: Tooltip, Panel, Dialog, and SimpleDialog."}}, "namespaces": ["YAHOO.util", "YAHOO.widget"], "filemap": {"Module.js": {"classlist": ["YAHOO.widget.Module"], "name": "Module.js", "module": "Container"}, "Config.js": {"classlist": ["YAHOO.util.Config"], "name": "Config.js", "module": "Container"}, "Panel.js": {"classlist": ["YAHOO.widget.Panel"], "name": "Panel.js", "module": "Container"}, "Tooltip.js": {"classlist": ["YAHOO.widget.Tooltip"], "name": "Tooltip.js", "module": "Container"}, "OverlayManager.js": {"classlist": ["YAHOO.widget.OverlayManager"], "name": "OverlayManager.js", "module": "Container"}, "Dialog.js": {"classlist": ["YAHOO.widget.Dialog"], "name": "Dialog.js", "module": "Container"}, "KeyListener.js": {"classlist": ["YAHOO.util.KeyListener"], "name": "KeyListener.js", "module": "Container"}, "Overlay.js": {"classlist": ["YAHOO.widget.Overlay"], "name": "Overlay.js", "module": "Container"}, "ContainerEffect.js": {"classlist": ["YAHOO.widget.ContainerEffect"], "name": "ContainerEffect.js", "module": "Container"}, "SimpleDialog.js": {"classlist": ["YAHOO.widget.SimpleDialog"], "name": "SimpleDialog.js", "module": "Container"}}}