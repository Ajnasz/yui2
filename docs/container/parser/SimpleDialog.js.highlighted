<div class="highlight" ><pre><span class="c">/*</span>
<span class="c">Copyright (c) 2006, Yahoo! Inc. All rights reserved.</span>
<span class="c">Code licensed under the BSD License:</span>
<span class="c">http://developer.yahoo.net/yui/license.txt</span>
<span class="c">Version 0.12</span>
<span class="c">*/</span>

<span class="c">/**</span>
<span class="c">* SimpleDialog is a simple implementation of Dialog that can be used to submit a single value. Forms can be processed in 3 ways -- via an asynchronous Connection utility call, a simple form POST or GET, or manually.</span>
<span class="c">* @namespace YAHOO.widget</span>
<span class="c">* @class SimpleDialog</span>
<span class="c">* @extends YAHOO.widget.Dialog</span>
<span class="c">* @constructor</span>
<span class="c">* @param {String}	el	The element ID representing the SimpleDialog &lt;em&gt;OR&lt;/em&gt;</span>
<span class="c">* @param {HTMLElement}	el	The element representing the SimpleDialog</span>
<span class="c">* @param {Object}	userConfig	The configuration object literal containing the configuration that should be set for this SimpleDialog. See configuration documentation for more details.</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">el</span><span class="o">,</span> <span class="nx">userConfig</span><span class="o">)</span> <span class="o">{</span>
	<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">constructor</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">el</span><span class="o">,</span> <span class="nx">userConfig</span><span class="o">);</span>
<span class="o">};</span>

<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">extend</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">,</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">Dialog</span><span class="o">);</span>

<span class="c">/**</span>
<span class="c">* Constant for the standard network icon for a blocking action</span>
<span class="c">* @property YAHOO.widget.SimpleDialog.ICON_BLOCK</span>
<span class="c">* @static</span>
<span class="c">* @final</span>
<span class="c">* @type String</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">ICON_BLOCK</span> <span class="o">=</span> <span class="s2">&quot;nt/ic/ut/bsc/blck16_1.gif&quot;</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c">* Constant for the standard network icon for alarm</span>
<span class="c">* @property YAHOO.widget.SimpleDialog.ICON_ALARM</span>
<span class="c">* @static</span>
<span class="c">* @final</span>
<span class="c">* @type String</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">ICON_ALARM</span> <span class="o">=</span> <span class="s2">&quot;nt/ic/ut/bsc/alrt16_1.gif&quot;</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c">* Constant for the standard network icon for help</span>
<span class="c">* @property YAHOO.widget.SimpleDialog.ICON_HELP</span>
<span class="c">* @static</span>
<span class="c">* @final</span>
<span class="c">* @type String</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">ICON_HELP</span>  <span class="o">=</span> <span class="s2">&quot;nt/ic/ut/bsc/hlp16_1.gif&quot;</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c">* Constant for the standard network icon for info</span>
<span class="c">* @property YAHOO.widget.SimpleDialog.ICON_INFO</span>
<span class="c">* @static</span>
<span class="c">* @final</span>
<span class="c">* @type String</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">ICON_INFO</span>  <span class="o">=</span> <span class="s2">&quot;nt/ic/ut/bsc/info16_1.gif&quot;</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c">* Constant for the standard network icon for warn</span>
<span class="c">* @property YAHOO.widget.SimpleDialog.ICON_WARN</span>
<span class="c">* @static</span>
<span class="c">* @final</span>
<span class="c">* @type String</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">ICON_WARN</span>  <span class="o">=</span> <span class="s2">&quot;nt/ic/ut/bsc/warn16_1.gif&quot;</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c">* Constant for the standard network icon for a tip</span>
<span class="c">* @property YAHOO.widget.SimpleDialog.ICON_TIP</span>
<span class="c">* @static</span>
<span class="c">* @final</span>
<span class="c">* @type String</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">ICON_TIP</span>   <span class="o">=</span> <span class="s2">&quot;nt/ic/ut/bsc/tip16_1.gif&quot;</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c">* Constant representing the default CSS class used for a SimpleDialog</span>
<span class="c">* @property YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG</span>
<span class="c">* @static</span>
<span class="c">* @final</span>
<span class="c">* @type String</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">CSS_SIMPLEDIALOG</span> <span class="o">=</span> <span class="s2">&quot;simple-dialog&quot;</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c">* Initializes the class&#39;s configurable properties which can be changed using the SimpleDialog&#39;s Config object (cfg).</span>
<span class="c">* @method initDefaultConfig</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">initDefaultConfig</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
	<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">initDefaultConfig</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>

	<span class="c">// Add dialog config properties //</span>
<span class="c"></span>
	<span class="c">/**</span>
<span class="c">	* Sets the informational icon for the SimpleDialog</span>
<span class="c">	* @config icon</span>
<span class="c">	* @type String</span>
<span class="c">	* @default &quot;none&quot;</span>
<span class="c">	*/</span>
	<span class="k">this</span><span class="o">.</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">addProperty</span><span class="o">(</span><span class="s2">&quot;icon&quot;</span><span class="o">,</span>	<span class="o">{</span> <span class="nx">value</span><span class="o">:</span><span class="s2">&quot;none&quot;</span><span class="o">,</span>	<span class="nx">handler</span><span class="o">:</span><span class="k">this</span><span class="o">.</span><span class="nx">configIcon</span><span class="o">,</span> <span class="nx">suppressEvent</span><span class="o">:</span><span class="kc">true</span> <span class="o">}</span> <span class="o">);</span>
	
	<span class="c">/**</span>
<span class="c">	* Sets the text for the SimpleDialog</span>
<span class="c">	* @config text</span>
<span class="c">	* @type String</span>
<span class="c">	* @default &quot;&quot;</span>
<span class="c">	*/</span>
	<span class="k">this</span><span class="o">.</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">addProperty</span><span class="o">(</span><span class="s2">&quot;text&quot;</span><span class="o">,</span>	<span class="o">{</span> <span class="nx">value</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="nx">handler</span><span class="o">:</span><span class="k">this</span><span class="o">.</span><span class="nx">configText</span><span class="o">,</span> <span class="nx">suppressEvent</span><span class="o">:</span><span class="kc">true</span><span class="o">,</span> <span class="nx">supercedes</span><span class="o">:[</span><span class="s2">&quot;icon&quot;</span><span class="o">]</span> <span class="o">}</span> <span class="o">);</span>
<span class="o">};</span>


<span class="c">/**</span>
<span class="c">* The SimpleDialog initialization method, which is executed for SimpleDialog and all of its subclasses. This method is automatically called by the constructor, and  sets up all DOM references for pre-existing markup, and creates required markup if it is not already present.</span>
<span class="c">* @method init</span>
<span class="c">* @param {String}	el	The element ID representing the SimpleDialog &lt;em&gt;OR&lt;/em&gt;</span>
<span class="c">* @param {HTMLElement}	el	The element representing the SimpleDialog</span>
<span class="c">* @param {Object}	userConfig	The configuration object literal containing the configuration that should be set for this SimpleDialog. See configuration documentation for more details.</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">init</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">el</span><span class="o">,</span> <span class="nx">userConfig</span><span class="o">)</span> <span class="o">{</span>
	<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">init</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="nx">el</span><span class="c">/*, userConfig*/</span><span class="o">);</span>  <span class="c">// Note that we don&#39;t pass the user config in here yet because we only want it executed once, at the lowest subclass level</span>
<span class="c"></span>
	<span class="k">this</span><span class="o">.</span><span class="nx">beforeInitEvent</span><span class="o">.</span><span class="nx">fire</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">);</span>

	<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">util</span><span class="o">.</span><span class="nx">Dom</span><span class="o">.</span><span class="nx">addClass</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="nx">element</span><span class="o">,</span> <span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">CSS_SIMPLEDIALOG</span><span class="o">);</span>

	<span class="k">this</span><span class="o">.</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">queueProperty</span><span class="o">(</span><span class="s2">&quot;postmethod&quot;</span><span class="o">,</span> <span class="s2">&quot;manual&quot;</span><span class="o">);</span>

	<span class="k">if</span> <span class="o">(</span><span class="nx">userConfig</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">applyConfig</span><span class="o">(</span><span class="nx">userConfig</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="k">this</span><span class="o">.</span><span class="nx">beforeRenderEvent</span><span class="o">.</span><span class="nx">subscribe</span><span class="o">(</span><span class="k">function</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(!</span> <span class="k">this</span><span class="o">.</span><span class="nx">body</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">this</span><span class="o">.</span><span class="nx">setBody</span><span class="o">(</span><span class="s2">&quot;&quot;</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">},</span> <span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>

	<span class="k">this</span><span class="o">.</span><span class="nx">initEvent</span><span class="o">.</span><span class="nx">fire</span><span class="o">(</span><span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">);</span>

<span class="o">};</span>
<span class="c">/**</span>
<span class="c">* Prepares the SimpleDialog&#39;s internal FORM object, creating one if one is not currently present, and adding the value hidden field.</span>
<span class="c">* @method registerForm</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">registerForm</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
	<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">superclass</span><span class="o">.</span><span class="nx">registerForm</span><span class="o">.</span><span class="nx">call</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
	<span class="k">this</span><span class="o">.</span><span class="nx">form</span><span class="o">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="s2">&quot;&lt;input type=\&quot;hidden\&quot; name=\&quot;&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s2">&quot;\&quot; value=\&quot;\&quot;/&gt;&quot;</span><span class="o">;</span>
<span class="o">};</span>

<span class="c">// BEGIN BUILT-IN PROPERTY EVENT HANDLERS //</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c">* Fired when the &quot;icon&quot; property is set.</span>
<span class="c">* @method configIcon</span>
<span class="c">* @param {String} type	The CustomEvent type (usually the property name)</span>
<span class="c">* @param {Object[]}	args	The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</span>
<span class="c">* @param {Object} obj	The scope object. For configuration handlers, this will usually equal the owner.</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">configIcon</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">type</span><span class="o">,</span><span class="nx">args</span><span class="o">,</span><span class="nx">obj</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">var</span> <span class="nx">icon</span> <span class="o">=</span> <span class="nx">args</span><span class="o">[</span><span class="m">0</span><span class="o">];</span>
	<span class="k">if</span> <span class="o">(</span><span class="nx">icon</span> <span class="o">&amp;&amp;</span> <span class="nx">icon</span> <span class="o">!=</span> <span class="s2">&quot;none&quot;</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">var</span> <span class="nx">iconHTML</span> <span class="o">=</span> <span class="s2">&quot;&lt;img src=\&quot;&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">imageRoot</span> <span class="o">+</span> <span class="nx">icon</span> <span class="o">+</span> <span class="s2">&quot;\&quot; class=\&quot;icon\&quot; /&gt;&quot;</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="nx">body</span><span class="o">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">iconHTML</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">body</span><span class="o">.</span><span class="nx">innerHTML</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">};</span>

<span class="c">/**</span>
<span class="c">* Fired when the &quot;text&quot; property is set.</span>
<span class="c">* @method configText</span>
<span class="c">* @param {String} type	The CustomEvent type (usually the property name)</span>
<span class="c">* @param {Object[]}	args	The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property.</span>
<span class="c">* @param {Object} obj	The scope object. For configuration handlers, this will usually equal the owner.</span>
<span class="c">*/</span>
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">configText</span> <span class="o">=</span> <span class="k">function</span><span class="o">(</span><span class="nx">type</span><span class="o">,</span><span class="nx">args</span><span class="o">,</span><span class="nx">obj</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">args</span><span class="o">[</span><span class="m">0</span><span class="o">];</span>
	<span class="k">if</span> <span class="o">(</span><span class="nx">text</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="nx">setBody</span><span class="o">(</span><span class="nx">text</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="nx">cfg</span><span class="o">.</span><span class="nx">refireEvent</span><span class="o">(</span><span class="s2">&quot;icon&quot;</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">};</span>
<span class="c">// END BUILT-IN PROPERTY EVENT HANDLERS //</span>
<span class="c"></span>
<span class="c">/**</span>
<span class="c">* Returns a string representation of the object.</span>
<span class="c">* @method toString</span>
<span class="c">* @return {String}	The string representation of the SimpleDialog</span>
<span class="c">*/</span> 
<span class="nx">YAHOO</span><span class="o">.</span><span class="nx">widget</span><span class="o">.</span><span class="nx">SimpleDialog</span><span class="o">.</span><span class="nx">prototype</span><span class="o">.</span><span class="nx">toString</span> <span class="o">=</span> <span class="k">function</span><span class="o">()</span> <span class="o">{</span>
	<span class="k">return</span> <span class="s2">&quot;SimpleDialog &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="nx">id</span><span class="o">;</span>
<span class="o">};</span>
</pre></div>
