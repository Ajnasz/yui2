{"classmap": {"YAHOO.util.Point": {"name": "YAHOO.util.Point", "constructors": [{"params": [{"type": "Int", "name": "x", "description": " The X position of the point"}, {"type": "Int", "name": "y", "description": " The Y position of the point"}], "description": "A point is a region that is special in that it represents a single point on \nthe grid."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Point", "extends": "Region", "superclass": "YAHOO.util.Region", "file": "Region.js", "guessedtype": "function", "shortname": "Point", "properties": {"y": {"type": "Int", "description": "The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)", "guessedname": "y", "guessedtype": "property"}, "x": {"type": "Int", "description": "The X position of the point, which is also the right, left and index zero (for Dom.getXY symmetry)", "guessedname": "x", "guessedtype": "property"}}, "description": "A point is a region that is special in that it represents a single point on \nthe grid."}, "YAHOO.util.Dom": {"name": "YAHOO.util.Dom", "namespace": "YAHOO.util", "module": "dom", "guessedname": "Dom", "methods": {"getElementsBy": {"params": [{"type": "Function", "name": "method", "description": " - A boolean method for testing elements which receives the element as its only argument."}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}], "description": "Returns a array of HTMLElements that pass the test applied by supplied boolean method.\nFor optimized performance, include a tag and\/or root node when possible.", "guessedname": "getElementsBy", "guessedtype": "function"}, "generateId": {"return": {"type": "String | Array", "description": "The generated ID, or array of generated IDs (or original ID if already present on an element)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An optional element array of elements to add an ID to (no ID is added if one is already present)."}, {"type": "String", "name": "prefix", "description": " (optional) an optional prefix to use (defaults to \"yui-gen\")."}], "description": "Generates a unique ID", "guessedname": "generateId", "guessedtype": "function"}, "getDocumentWidth": {"return": {"type": "Int", "description": "The width of the actual document (which includes the body and its margin)."}, "description": "Returns the width of the document.", "guessedname": "getDocumentWidth", "guessedtype": "function"}, "setStyle": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property to be set."}, {"type": "String", "name": "val", "description": " The value to apply to the given property."}], "description": "Wrapper for setting style properties of HTMLElements.  Normalizes \"opacity\" across modern browsers.", "guessedname": "setStyle", "guessedtype": "function"}, "getX": {"return": {"type": "String | Array", "description": "The X position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getX", "guessedtype": "function"}, "getY": {"return": {"type": "String | Array", "description": "The Y position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getY", "guessedtype": "function"}, "getElementsByClassName": {"return": {"type": "Array", "description": "An array of elements that have the given class name"}, "params": [{"type": "String", "name": "className", "description": " The class name to match against"}, {"type": "String", "name": "tag", "description": " (optional) The tag name of the elements being collected"}, {"type": "String | HTMLElement", "name": "root", "description": " (optional) The HTMLElement or an ID to use as the starting point"}], "description": "Returns a array of HTMLElements with the given class.\nFor optimized performance, include a tag and\/or root node when possible.", "guessedname": "getElementsByClassName", "guessedtype": "function"}, "replaceClass": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "oldClassName", "description": " the class name to be replaced"}, {"type": "String", "name": "newClassName", "description": " the class name that will be replacing the old class name"}], "description": "Replace a class with another class for a given element or collection of elements.\nIf no oldClassName is present, the newClassName is simply added.", "guessedname": "replaceClass", "guessedtype": "function"}, "getDocumentHeight": {"return": {"type": "Int", "description": "The height of the actual document (which includes the body and its margin)."}, "description": "Returns the height of the document.", "guessedname": "getDocumentHeight", "guessedtype": "function"}, "getClientHeight": {"deprecated": "Now using getViewportHeight.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The height of the viewable area of the page."}, "description": "Returns the height of the client (viewport).", "guessedname": "getClientHeight", "guessedtype": "function"}, "inDocument": {"return": {"type": "Boolean", "description": "Whether or not the element is present in the current document"}, "params": [{"type": "String | HTMLElement", "name": "el", "description": " The element to search for"}], "description": "Determines whether an HTMLElement is present in the current document.", "guessedname": "inDocument", "guessedtype": "function"}, "getViewportHeight": {"return": {"type": "Int", "description": "The height of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current height of the viewport.", "guessedname": "getViewportHeight", "guessedtype": "function"}, "addClass": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to add the class to"}, {"type": "String", "name": "className", "description": " the class name to add to the class attribute"}], "description": "Adds a class name to a given element or collection of elements.", "guessedname": "addClass", "guessedtype": "function"}, "getViewportWidth": {"return": {"type": "Int", "description": "The width of the viewable area of the page (excludes scrollbars)."}, "description": "Returns the current width of the viewport.", "guessedname": "getViewportWidth", "guessedtype": "function"}, "get": {"return": {"type": "HTMLElement | Array", "description": "A DOM reference to an HTML element or an array of HTMLElements."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}], "description": "Returns an HTMLElement reference.", "guessedname": "get", "guessedtype": "function"}, "removeClass": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to remove the class from"}, {"type": "String", "name": "className", "description": " the class name to remove from the class attribute"}], "description": "Removes a class name from a given element or collection of elements.", "guessedname": "removeClass", "guessedtype": "function"}, "getStyle": {"return": {"type": "String | Array", "description": "The current value of the style property for the element(s)."}, "params": [{"type": "String | HTMLElement |Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "String", "name": "property", "description": " The style property whose value is returned."}], "description": "Normalizes currentStyle and ComputedStyle.", "guessedname": "getStyle", "guessedtype": "function"}, "setXY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}, {"type": "Array", "name": "pos", "description": " Contains X & Y values for new position (coordinates are page-based)"}, {"type": "Boolean", "name": "noRetry", "description": " By default we try and set the position a second time if the first fails"}], "description": "Set the position of an html element in page coordinates, regardless of how the element is positioned.\nThe element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setXY", "guessedtype": "function"}, "setX": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "Int", "name": "x", "description": " The value to use as the X coordinate for the element(s)."}], "description": "Set the X position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setX", "guessedtype": "function"}, "setY": {"params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}, {"type": "Int", "name": "x", "description": " To use as the Y coordinate for the element(s)."}], "description": "Set the Y position of an html element in page coordinates, regardless of how the element is positioned.\nThe element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "setY", "guessedtype": "function"}, "getXY": {"return": {"type": "Array", "description": "The XY position of the element(s)"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements"}], "description": "Gets the current position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false).", "guessedname": "getXY", "guessedtype": "function"}, "getClientWidth": {"deprecated": "Now using getViewportWidth.  This interface left intact for back compat.", "return": {"type": "Int", "description": "The width of the viewable area of the page."}, "description": "Returns the width of the client (viewport).", "guessedname": "getClientWidth", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region | Array", "description": "A Region or array of Region instances containing \"top, left, bottom, right\" member data."}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and\/or HTMLElements."}], "description": "Returns the region position of the given element.\nThe element must be part of the DOM tree to have a region (display:none or elements not appended return false).", "guessedname": "getRegion", "guessedtype": "function"}, "batch": {"return": {"type": "HTMLElement | Array", "description": "The element(s) with the method applied"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " (optional) An element or array of elements to apply the method to"}, {"type": "Function", "name": "method", "description": " The method to apply to the element(s)"}, {"type": "Any", "name": "o", "description": " (optional) An optional arg that is passed to the supplied method"}, {"type": "Boolean", "name": "override", "description": " (optional) Whether or not to override the scope of \"method\" with \"o\""}], "description": "Returns an array of elements that have had the supplied method applied.\nThe method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) ).", "guessedname": "batch", "guessedtype": "function"}, "isAncestor": {"return": {"type": "Boolean", "description": "Whether or not the haystack is an ancestor of needle"}, "params": [{"type": "String | HTMLElement", "name": "haystack", "description": " The possible ancestor"}, {"type": "String | HTMLElement", "name": "needle", "description": " The possible descendent"}], "description": "Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy.", "guessedname": "isAncestor", "guessedtype": "function"}, "hasClass": {"return": {"type": "Boolean | Array", "description": "A boolean value or array of boolean values"}, "params": [{"type": "String | HTMLElement | Array", "name": "el", "description": " The element or collection to test"}, {"type": "String", "name": "className", "description": " the class name to search for"}], "description": "Determines whether an HTMLElement has the given className.", "guessedname": "hasClass", "guessedtype": "function"}}, "file": "Dom.js", "guessedtype": "property", "shortname": "Dom", "description": "Provides helper methods for DOM elements."}, "YAHOO.util.Region": {"name": "YAHOO.util.Region", "constructors": [{"params": [{"type": "Int", "name": "t", "description": " the top extent"}, {"type": "Int", "name": "r", "description": " the right extent"}, {"type": "Int", "name": "b", "description": " the bottom extent"}, {"type": "Int", "name": "l", "description": " the left extent"}], "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}], "namespace": "YAHOO.util", "module": "dom", "guessedname": "Region", "methods": {"getArea": {"return": {"type": "Int", "description": "the region's area"}, "description": "Returns the area of the region", "guessedname": "getArea", "guessedtype": "function"}, "getRegion": {"return": {"type": "Region", "description": "The region that the element occupies"}, "description": "Returns a region that is occupied by the DOM element", "static": "", "guessedname": "getRegion", "guessedtype": "function", "params": [{"type": "HTMLElement", "name": "el", "description": " The element"}]}, "contains": {"return": {"type": "Boolean", "description": "True if the region is contained with this region, \nelse false"}, "params": [{"type": "Region", "name": "region", "description": " The region to evaluate"}], "description": "Returns true if this region contains the region passed in", "guessedname": "contains", "guessedtype": "function"}, "union": {"return": {"type": "Region", "description": "The union region"}, "params": [{"type": "Region", "name": "region", "description": " The region that to create the union with"}], "description": "Returns the region representing the smallest region that can contain both\nthe passed in region and this region.", "guessedname": "union", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "string the region properties"}, "description": "toString", "guessedname": "toString", "guessedtype": "function"}, "intersect": {"return": {"type": "Region", "description": "The overlap region, or null if there is no overlap"}, "params": [{"type": "Region", "name": "region", "description": " The region that intersects"}], "description": "Returns the region where the passed in region overlaps with this one", "guessedname": "intersect", "guessedtype": "function"}}, "file": "Region.js", "guessedtype": "function", "shortname": "Region", "properties": {"right": {"type": "int", "description": "The region's right extent", "guessedname": "right", "guessedtype": "property"}, "bottom": {"type": "Int", "description": "The region's bottom extent", "guessedname": "bottom", "guessedtype": "property"}, "top": {"type": "Int", "description": "The region's top extent", "guessedname": "top", "guessedtype": "property"}, "1": {"type": "Int", "description": "The region's top extent as index, for symmetry with set\/getXY"}, "0": {"type": "Int", "description": "The region's left extent as index, for symmetry with set\/getXY"}, "left": {"type": "Int", "description": "The region's left extent", "guessedname": "left", "guessedtype": "property"}}, "description": "A region is a representation of an object on a grid.  It is defined\nby the top, right, bottom, left extents, so is rectangular by default.  If \nother shapes are required, this class could be extended to support it."}}, "modules": {"dom": {"classlist": ["YAHOO.util.Dom", "YAHOO.util.Region", "YAHOO.util.Point"], "name": "dom", "filelist": ["Dom.js", "Region.js"], "description": "The dom module provides helper methods for manipulating Dom elements."}}, "namespaces": ["YAHOO.util"], "filemap": {"Dom.js": {"classlist": ["YAHOO.util.Dom"], "name": "Dom.js", "module": "dom"}, "Region.js": {"classlist": ["YAHOO.util.Region", "YAHOO.util.Point"], "name": "Region.js", "module": "dom"}}}